./src/linux-aws-headers-5.4.0-1015/scripts/checkkconfigsymbols.py:            print("%s: %s" % (yel("Similar symbols"), ', '.join(sims)))
./src/linux-aws-headers-5.4.0-1015/scripts/checkkconfigsymbols.py:            print("%s: no similar symbols found" % yel("Similar symbols"))
./src/linux-aws-headers-5.4.0-1015/scripts/checkkconfigsymbols.py:        print(red(symbol))
./src/linux-aws-headers-5.4.0-1015/scripts/checkkconfigsymbols.py:        print("%s: %s" % (yel("Referencing files"), ", ".join(files)))
./src/linux-aws-headers-5.4.0-1015/scripts/checkkconfigsymbols.py:            print("%s: %s" % (sims_out, ', '.join(sims)))
./src/linux-aws-headers-5.4.0-1015/scripts/checkkconfigsymbols.py:            print("%s: %s" % (sims_out, "no similar symbols found"))
./src/linux-aws-headers-5.4.0-1015/scripts/checkkconfigsymbols.py:            print("%s:" % yel("Commits changing symbol"))
./src/linux-aws-headers-5.4.0-1015/scripts/checkkconfigsymbols.py:                    print("\t- %s (\"%s\")" % (yel(commit[0]), commit[1]))
./src/linux-aws-headers-5.4.0-1015/scripts/checkkconfigsymbols.py:                print("\t- no commit found")
./src/linux-aws-headers-5.4.0-1015/scripts/checkkconfigsymbols.py:        print()  # new line
./src/linux-aws-headers-5.4.0-1015/scripts/bpf_helpers_doc.py:        print('Parsed description of %d helper function(s)' % len(self.helpers),
./src/linux-aws-headers-5.4.0-1015/scripts/bpf_helpers_doc.py:        print(header)
./src/linux-aws-headers-5.4.0-1015/scripts/bpf_helpers_doc.py:        print(footer)
./src/linux-aws-headers-5.4.0-1015/scripts/bpf_helpers_doc.py:        print('**%s %s%s(' % (proto['ret_type'],
./src/linux-aws-headers-5.4.0-1015/scripts/bpf_helpers_doc.py:            print(one_arg, end='')
./src/linux-aws-headers-5.4.0-1015/scripts/bpf_helpers_doc.py:        print(')**')
./src/linux-aws-headers-5.4.0-1015/scripts/bpf_helpers_doc.py:            print('\tDescription')
./src/linux-aws-headers-5.4.0-1015/scripts/bpf_helpers_doc.py:                print('{}{}'.format('\t\t' if line else '', line))
./src/linux-aws-headers-5.4.0-1015/scripts/bpf_helpers_doc.py:            print('\tReturn')
./src/linux-aws-headers-5.4.0-1015/scripts/bpf_helpers_doc.py:                print('{}{}'.format('\t\t' if line else '', line))
./src/linux-aws-headers-5.4.0-1015/scripts/bpf_helpers_doc.py:        print('')
./src/linux-aws-headers-5.4.0-1015/scripts/kconfig/tests/conftest.py:        print("[command]\n{}\n".format(' '.join(command)))
./src/linux-aws-headers-5.4.0-1015/scripts/kconfig/tests/conftest.py:        print("[retcode]\n{}\n".format(self.retcode))
./src/linux-aws-headers-5.4.0-1015/scripts/kconfig/tests/conftest.py:        print("[stdout]")
./src/linux-aws-headers-5.4.0-1015/scripts/kconfig/tests/conftest.py:        print(self.stdout)
./src/linux-aws-headers-5.4.0-1015/scripts/kconfig/tests/conftest.py:        print("[stderr]")
./src/linux-aws-headers-5.4.0-1015/scripts/kconfig/tests/conftest.py:        print(self.stderr)
./src/linux-aws-headers-5.4.0-1015/scripts/kconfig/tests/conftest.py:            print("[output for '{}']".format(out_file))
./src/linux-aws-headers-5.4.0-1015/scripts/kconfig/tests/conftest.py:            print(self.config)
./src/linux-aws-headers-5.4.0-1015/scripts/spdxcheck.py:            print(tok)
./src/linux-aws-headers-5.4.0-1018/scripts/checkkconfigsymbols.py:            print("%s: %s" % (yel("Similar symbols"), ', '.join(sims)))
./src/linux-aws-headers-5.4.0-1018/scripts/checkkconfigsymbols.py:            print("%s: no similar symbols found" % yel("Similar symbols"))
./src/linux-aws-headers-5.4.0-1018/scripts/checkkconfigsymbols.py:        print(red(symbol))
./src/linux-aws-headers-5.4.0-1018/scripts/checkkconfigsymbols.py:        print("%s: %s" % (yel("Referencing files"), ", ".join(files)))
./src/linux-aws-headers-5.4.0-1018/scripts/checkkconfigsymbols.py:            print("%s: %s" % (sims_out, ', '.join(sims)))
./src/linux-aws-headers-5.4.0-1018/scripts/checkkconfigsymbols.py:            print("%s: %s" % (sims_out, "no similar symbols found"))
./src/linux-aws-headers-5.4.0-1018/scripts/checkkconfigsymbols.py:            print("%s:" % yel("Commits changing symbol"))
./src/linux-aws-headers-5.4.0-1018/scripts/checkkconfigsymbols.py:                    print("\t- %s (\"%s\")" % (yel(commit[0]), commit[1]))
./src/linux-aws-headers-5.4.0-1018/scripts/checkkconfigsymbols.py:                print("\t- no commit found")
./src/linux-aws-headers-5.4.0-1018/scripts/checkkconfigsymbols.py:        print()  # new line
./src/linux-aws-headers-5.4.0-1018/scripts/bpf_helpers_doc.py:        print('Parsed description of %d helper function(s)' % len(self.helpers),
./src/linux-aws-headers-5.4.0-1018/scripts/bpf_helpers_doc.py:        print(header)
./src/linux-aws-headers-5.4.0-1018/scripts/bpf_helpers_doc.py:        print(footer)
./src/linux-aws-headers-5.4.0-1018/scripts/bpf_helpers_doc.py:        print('**%s %s%s(' % (proto['ret_type'],
./src/linux-aws-headers-5.4.0-1018/scripts/bpf_helpers_doc.py:            print(one_arg, end='')
./src/linux-aws-headers-5.4.0-1018/scripts/bpf_helpers_doc.py:        print(')**')
./src/linux-aws-headers-5.4.0-1018/scripts/bpf_helpers_doc.py:            print('\tDescription')
./src/linux-aws-headers-5.4.0-1018/scripts/bpf_helpers_doc.py:                print('{}{}'.format('\t\t' if line else '', line))
./src/linux-aws-headers-5.4.0-1018/scripts/bpf_helpers_doc.py:            print('\tReturn')
./src/linux-aws-headers-5.4.0-1018/scripts/bpf_helpers_doc.py:                print('{}{}'.format('\t\t' if line else '', line))
./src/linux-aws-headers-5.4.0-1018/scripts/bpf_helpers_doc.py:        print('')
./src/linux-aws-headers-5.4.0-1018/scripts/kconfig/tests/conftest.py:        print("[command]\n{}\n".format(' '.join(command)))
./src/linux-aws-headers-5.4.0-1018/scripts/kconfig/tests/conftest.py:        print("[retcode]\n{}\n".format(self.retcode))
./src/linux-aws-headers-5.4.0-1018/scripts/kconfig/tests/conftest.py:        print("[stdout]")
./src/linux-aws-headers-5.4.0-1018/scripts/kconfig/tests/conftest.py:        print(self.stdout)
./src/linux-aws-headers-5.4.0-1018/scripts/kconfig/tests/conftest.py:        print("[stderr]")
./src/linux-aws-headers-5.4.0-1018/scripts/kconfig/tests/conftest.py:        print(self.stderr)
./src/linux-aws-headers-5.4.0-1018/scripts/kconfig/tests/conftest.py:            print("[output for '{}']".format(out_file))
./src/linux-aws-headers-5.4.0-1018/scripts/kconfig/tests/conftest.py:            print(self.config)
./src/linux-aws-headers-5.4.0-1018/scripts/spdxcheck.py:            print(tok)
./lib/python3.8/getpass.py:    print("Warning: Password input may be echoed.", file=stream)
./lib/python3.8/pydoc.py:        print(value)
./lib/python3.8/pydoc.py:        print('wrote', name + '.html')
./lib/python3.8/pydoc.py:        print(value)
./lib/python3.8/pydoc.py:        print(modname, desc and '- ' + desc)
./lib/python3.8/pydoc.py:        >>> print(serverthread.error)
./lib/python3.8/pydoc.py:        print(serverthread.error)
./lib/python3.8/pydoc.py:            print('Server ready at', serverthread.url)
./lib/python3.8/pydoc.py:            print(server_help_msg)
./lib/python3.8/pydoc.py:                    print(server_help_msg)
./lib/python3.8/pydoc.py:            print()
./lib/python3.8/pydoc.py:                print('Server stopped')
./lib/python3.8/pydoc.py:                print('file %r does not exist' % arg)
./lib/python3.8/pydoc.py:                print(value)
./lib/python3.8/pydoc.py:        print("""pydoc - the Python documentation tool
./lib/python3.8/xml/dom/pulldom.py:        print(exception)
./lib/python3.8/xml/sax/handler.py:        print(exception)
./lib/python3.8/sre_parse.py:            print(level*"  " + str(op), end='')
./lib/python3.8/sre_parse.py:                print()
./lib/python3.8/sre_parse.py:                    print((level+1)*"  " + str(op), a)
./lib/python3.8/sre_parse.py:                print()
./lib/python3.8/sre_parse.py:                        print(level*"  " + "OR")
./lib/python3.8/sre_parse.py:                print('', condgroup)
./lib/python3.8/sre_parse.py:                    print(level*"  " + "ELSE")
./lib/python3.8/sre_parse.py:                            print()
./lib/python3.8/sre_parse.py:                            print(' ', end='')
./lib/python3.8/sre_parse.py:                        print(a, end='')
./lib/python3.8/sre_parse.py:                    print()
./lib/python3.8/sre_parse.py:                print('', av)
./lib/python3.8/socketserver.py:        print('-'*40, file=sys.stderr)
./lib/python3.8/socketserver.py:        print('Exception happened during processing of request from',
./lib/python3.8/socketserver.py:        print('-'*40, file=sys.stderr)
./lib/python3.8/tarfile.py:    print(s, end=' ')
./lib/python3.8/tarfile.py:            print()
./lib/python3.8/tarfile.py:            print(msg, file=sys.stderr)
./lib/python3.8/tarfile.py:                print(tar.getmembers(), file=sys.stderr)
./lib/python3.8/tarfile.py:                print('{!r} is a tar archive.'.format(src))
./lib/python3.8/tarfile.py:                print(msg)
./lib/python3.8/tarfile.py:            print('{!r} file created.'.format(tar_name))
./lib/python3.8/pstats.py:            print("Invalid timing data %s" %
./lib/python3.8/pstats.py:        print(msg, file=self.stream)
./lib/python3.8/pstats.py:            print(filename, file=self.stream)
./lib/python3.8/pstats.py:            print(file=self.stream)
./lib/python3.8/pstats.py:            print(indent, func_get_function_name(func), file=self.stream)
./lib/python3.8/pstats.py:        print(indent, self.total_calls, "function calls", end=' ', file=self.stream)
./lib/python3.8/pstats.py:            print("(%d primitive calls)" % self.prim_calls, end=' ', file=self.stream)
./lib/python3.8/pstats.py:        print("in %.3f seconds" % self.total_tt, file=self.stream)
./lib/python3.8/pstats.py:        print(file=self.stream)
./lib/python3.8/pstats.py:            print(file=self.stream)
./lib/python3.8/pstats.py:            print(file=self.stream)
./lib/python3.8/pstats.py:            print(file=self.stream)
./lib/python3.8/pstats.py:            print(file=self.stream)
./lib/python3.8/pstats.py:            print(file=self.stream)
./lib/python3.8/pstats.py:            print(file=self.stream)
./lib/python3.8/pstats.py:        print("Function ".ljust(name_size) + column_title, file=self.stream)
./lib/python3.8/pstats.py:            print(" "*name_size + "    ncalls  tottime  cumtime", file=self.stream)
./lib/python3.8/pstats.py:        print(func_std_string(source).ljust(name_size) + arrow, end=' ', file=self.stream)
./lib/python3.8/pstats.py:            print(file=self.stream)
./lib/python3.8/pstats.py:            print(indent*left_width + substats, file=self.stream)
./lib/python3.8/pstats.py:        print('   ncalls  tottime  percall  cumtime  percall', end=' ', file=self.stream)
./lib/python3.8/pstats.py:        print('filename:lineno(function)', file=self.stream)
./lib/python3.8/pstats.py:        print(c.rjust(9), end=' ', file=self.stream)
./lib/python3.8/pstats.py:        print(f8(tt), end=' ', file=self.stream)
./lib/python3.8/pstats.py:            print(' '*8, end=' ', file=self.stream)
./lib/python3.8/pstats.py:            print(f8(tt/nc), end=' ', file=self.stream)
./lib/python3.8/pstats.py:        print(f8(ct), end=' ', file=self.stream)
./lib/python3.8/pstats.py:            print(' '*8, end=' ', file=self.stream)
./lib/python3.8/pstats.py:            print(f8(ct/cc), end=' ', file=self.stream)
./lib/python3.8/pstats.py:        print(func_std_string(func), file=self.stream)
./lib/python3.8/pstats.py:                        print("Fraction argument must be in [0, 1]", file=self.stream)
./lib/python3.8/pstats.py:                print("No statistics object is loaded.", file=self.stream)
./lib/python3.8/pstats.py:            print("Arguments may be:", file=self.stream)
./lib/python3.8/pstats.py:            print("* An integer maximum number of entries to print.", file=self.stream)
./lib/python3.8/pstats.py:            print("* A decimal fractional number between 0 and 1, controlling", file=self.stream)
./lib/python3.8/pstats.py:            print("  what fraction of selected entries to print.", file=self.stream)
./lib/python3.8/pstats.py:            print("* A regular expression; only entries with function names", file=self.stream)
./lib/python3.8/pstats.py:            print("  that match it are printed.", file=self.stream)
./lib/python3.8/pstats.py:                    print("Failed to load statistics for %s: %s" % (line, e), file=self.stream)
./lib/python3.8/pstats.py:                print("No statistics object is loaded.", file=self.stream)
./lib/python3.8/pstats.py:            print("Add profile info from given file to current statistics object.", file=self.stream)
./lib/python3.8/pstats.py:            print("Print callees statistics from the current stat object.", file=self.stream)
./lib/python3.8/pstats.py:            print("Print callers statistics from the current stat object.", file=self.stream)
./lib/python3.8/pstats.py:            print("", file=self.stream)
./lib/python3.8/pstats.py:            print("Leave the profile browser.", file=self.stream)
./lib/python3.8/pstats.py:            print("Leave the profile browser.", file=self.stream)
./lib/python3.8/pstats.py:                    print(err.args[1], file=self.stream)
./lib/python3.8/pstats.py:                    print(err.__class__.__name__ + ':', err, file=self.stream)
./lib/python3.8/pstats.py:                print("No statistics object is current -- cannot reload.", file=self.stream)
./lib/python3.8/pstats.py:            print("Read in profile data from a specified file.", file=self.stream)
./lib/python3.8/pstats.py:            print("Without argument, reload the current file.", file=self.stream)
./lib/python3.8/pstats.py:                print("No statistics object is loaded.", file=self.stream)
./lib/python3.8/pstats.py:            print("Reverse the sort order of the profiling report.", file=self.stream)
./lib/python3.8/pstats.py:                print("No statistics object is loaded.", file=self.stream)
./lib/python3.8/pstats.py:                print("Valid sort keys (unique prefixes are accepted):", file=self.stream)
./lib/python3.8/pstats.py:                    print("%s -- %s" % (key, value[1]), file=self.stream)
./lib/python3.8/pstats.py:            print("Sort profile data according to specified keys.", file=self.stream)
./lib/python3.8/pstats.py:            print("(Typing `sort' without arguments lists valid keys.)", file=self.stream)
./lib/python3.8/pstats.py:            print("Print statistics from the current stat object.", file=self.stream)
./lib/python3.8/pstats.py:                print("No statistics object is loaded.", file=self.stream)
./lib/python3.8/pstats.py:            print("Strip leading path information from filenames in the report.", file=self.stream)
./lib/python3.8/pstats.py:            print("Show help for a given command.", file=self.stream)
./lib/python3.8/pstats.py:        print("Welcome to the profile statistics browser.", file=browser.stream)
./lib/python3.8/pstats.py:        print("Goodbye.", file=browser.stream)
./lib/python3.8/optparse.py:            print(self.get_usage(), file=file)
./lib/python3.8/optparse.py:            print(self.get_version(), file=file)
./lib/python3.8/telnetlib.py:>>> print(tn.read_all())
./lib/python3.8/telnetlib.py:            print('Telnet(%s,%s):' % (self.host, self.port), end=' ')
./lib/python3.8/telnetlib.py:                print(msg % args)
./lib/python3.8/telnetlib.py:                print(msg)
./lib/python3.8/telnetlib.py:                            print('*** Connection closed by remote host ***')
./lib/python3.8/telnetlib.py:                print('*** Connection closed by remote host ***')
./lib/python3.8/ctypes/util.py:        print(cdll.msvcrt)
./lib/python3.8/ctypes/util.py:        print(cdll.load("msvcrt"))
./lib/python3.8/ctypes/util.py:        print(find_library("msvcrt"))
./lib/python3.8/ctypes/util.py:        print(find_library("m"))
./lib/python3.8/ctypes/util.py:        print(find_library("c"))
./lib/python3.8/ctypes/util.py:        print(find_library("bz2"))
./lib/python3.8/ctypes/util.py:            print(cdll.LoadLibrary("libm.dylib"))
./lib/python3.8/ctypes/util.py:            print(cdll.LoadLibrary("libcrypto.dylib"))
./lib/python3.8/ctypes/util.py:            print(cdll.LoadLibrary("libSystem.dylib"))
./lib/python3.8/ctypes/util.py:            print(cdll.LoadLibrary("System.framework/System"))
./lib/python3.8/ctypes/util.py:                print(f"Using CDLL(name, os.RTLD_MEMBER): {CDLL('libc.a(shr.o)', os.RTLD_MEMBER)}")
./lib/python3.8/ctypes/util.py:                print(f"Using cdll.LoadLibrary(): {cdll.LoadLibrary('libc.a(shr.o)')}")
./lib/python3.8/ctypes/util.py:                print(find_library("rpm"))
./lib/python3.8/ctypes/util.py:                print(cdll.LoadLibrary("librpm.so"))
./lib/python3.8/ctypes/util.py:                print(f"Using CDLL(name, os.RTLD_MEMBER): {CDLL('libc.a(shr_64.o)', os.RTLD_MEMBER)}")
./lib/python3.8/ctypes/util.py:                print(f"Using cdll.LoadLibrary(): {cdll.LoadLibrary('libc.a(shr_64.o)')}")
./lib/python3.8/ctypes/util.py:            print(f"crypt\t:: {find_library('crypt')}")
./lib/python3.8/ctypes/util.py:            print(f"crypt\t:: {cdll.LoadLibrary(find_library('crypt'))}")
./lib/python3.8/ctypes/util.py:            print(f"crypto\t:: {find_library('crypto')}")
./lib/python3.8/ctypes/util.py:            print(f"crypto\t:: {cdll.LoadLibrary(find_library('crypto'))}")
./lib/python3.8/ctypes/util.py:            print(cdll.LoadLibrary("libm.so"))
./lib/python3.8/ctypes/util.py:            print(cdll.LoadLibrary("libcrypt.so"))
./lib/python3.8/ctypes/util.py:            print(find_library("crypt"))
./lib/python3.8/cgi.py:    print("Content-type: text/html")
./lib/python3.8/cgi.py:    print()
./lib/python3.8/cgi.py:        print("<H3>What follows is a test, not an actual exception:</H3>")
./lib/python3.8/cgi.py:    print("<H1>Second try with a small maxlen...</H1>")
./lib/python3.8/cgi.py:    print()
./lib/python3.8/cgi.py:    print("<H3>Traceback (most recent call last):</H3>")
./lib/python3.8/cgi.py:    print("<PRE>%s<B>%s</B></PRE>" % (
./lib/python3.8/cgi.py:    print()
./lib/python3.8/cgi.py:    print("<H3>Shell Environment:</H3>")
./lib/python3.8/cgi.py:    print("<DL>")
./lib/python3.8/cgi.py:        print("<DT>", html.escape(key), "<DD>", html.escape(environ[key]))
./lib/python3.8/cgi.py:    print("</DL>")
./lib/python3.8/cgi.py:    print()
./lib/python3.8/cgi.py:    print()
./lib/python3.8/cgi.py:    print("<H3>Form Contents:</H3>")
./lib/python3.8/cgi.py:        print("<P>No form fields.")
./lib/python3.8/cgi.py:    print("<DL>")
./lib/python3.8/cgi.py:        print("<DT>" + html.escape(key) + ":", end=' ')
./lib/python3.8/cgi.py:        print("<i>" + html.escape(repr(type(value))) + "</i>")
./lib/python3.8/cgi.py:        print("<DD>" + html.escape(repr(value)))
./lib/python3.8/cgi.py:    print("</DL>")
./lib/python3.8/cgi.py:    print()
./lib/python3.8/cgi.py:    print()
./lib/python3.8/cgi.py:    print("<H3>Current Working Directory:</H3>")
./lib/python3.8/cgi.py:        print("OSError:", html.escape(str(msg)))
./lib/python3.8/cgi.py:        print(html.escape(pwd))
./lib/python3.8/cgi.py:    print()
./lib/python3.8/cgi.py:    print()
./lib/python3.8/cgi.py:    print("<H3>Command Line Arguments:</H3>")
./lib/python3.8/cgi.py:    print()
./lib/python3.8/cgi.py:    print(sys.argv)
./lib/python3.8/cgi.py:    print()
./lib/python3.8/cgi.py:    print("""
./lib/python3.8/site.py:                print("Error processing line {:d} of {}:\n".format(n+1, fullname),
./lib/python3.8/site.py:                        print('  '+line, file=sys.stderr)
./lib/python3.8/site.py:                print("\nRemainder of file ignored", file=sys.stderr)
./lib/python3.8/site.py:        print("sys.path = [")
./lib/python3.8/site.py:            print("    %r," % (dir,))
./lib/python3.8/site.py:        print("]")
./lib/python3.8/site.py:        print("USER_BASE: %r (%s)" % (user_base,
./lib/python3.8/site.py:        print("USER_SITE: %r (%s)" % (user_site,
./lib/python3.8/site.py:        print("ENABLE_USER_SITE: %r" %  ENABLE_USER_SITE)
./lib/python3.8/site.py:        print(os.pathsep.join(buffer))
./lib/python3.8/site.py:        print(textwrap.dedent(help % (sys.argv[0], os.pathsep)))
./lib/python3.8/distutils/bcppcompiler.py:                print(msg)
./lib/python3.8/distutils/dist.py:            print('')
./lib/python3.8/distutils/dist.py:            print('')
./lib/python3.8/distutils/dist.py:            print('')
./lib/python3.8/distutils/dist.py:        print(gen_usage(self.script_name))
./lib/python3.8/distutils/dist.py:            print('')
./lib/python3.8/distutils/dist.py:            print(gen_usage(self.script_name))
./lib/python3.8/distutils/dist.py:                    print(','.join(value))
./lib/python3.8/distutils/dist.py:                    print('\n'.join(value))
./lib/python3.8/distutils/dist.py:                    print(value)
./lib/python3.8/distutils/dist.py:        print(header + ":")
./lib/python3.8/distutils/dist.py:            print("  %-*s  %s" % (max_length, cmd, description))
./lib/python3.8/distutils/dist.py:            print()
./lib/python3.8/distutils/command/install.py:            print("config vars:")
./lib/python3.8/distutils/command/bdist_rpm.py:            print("before _get_package_data():")
./lib/python3.8/distutils/command/bdist_rpm.py:            print("vendor =", self.vendor)
./lib/python3.8/distutils/command/bdist_rpm.py:            print("packager =", self.packager)
./lib/python3.8/distutils/command/bdist_rpm.py:            print("doc_files =", self.doc_files)
./lib/python3.8/distutils/command/bdist_rpm.py:            print("changelog =", self.changelog)
./lib/python3.8/distutils/command/register.py:                print('Please choose one of the four options!')
./lib/python3.8/distutils/command/register.py:                    print("Password and confirm don't match!")
./lib/python3.8/distutils/fancy_getopt.py:        print("width: %d" % w)
./lib/python3.8/distutils/fancy_getopt.py:        print("\n".join(wrap_text(text, w)))
./lib/python3.8/distutils/fancy_getopt.py:        print()
./lib/python3.8/distutils/filelist.py:            print(msg)
./lib/python3.8/distutils/ccompiler.py:            print(msg)
./lib/python3.8/distutils/cmd.py:            print(msg)
./lib/python3.8/distutils/versionpredicate.py:    >>> print(v)
./lib/python3.8/distutils/core.py:        print("options (after parsing config files):")
./lib/python3.8/distutils/core.py:        print("options (after parsing command line):")
./lib/python3.8/plistlib.py:    print(pl["aKey"])
./lib/python3.8/quopri.py:        print(msg)
./lib/python3.8/quopri.py:        print("usage: quopri [-t | -d] [file] ...")
./lib/python3.8/quopri.py:        print("-t: quote tabs")
./lib/python3.8/quopri.py:        print("-d: decode; default encode")
./lib/python3.8/quopri.py:        print("-t and -d are mutually exclusive")
./lib/python3.8/base64.py:        print(msg)
./lib/python3.8/base64.py:        print("""usage: %s [-d|-e|-u|-t] [file|-]
./lib/python3.8/base64.py:    print(repr(s0))
./lib/python3.8/base64.py:    print(repr(s1))
./lib/python3.8/base64.py:    print(repr(s2))
./lib/python3.8/ftplib.py:            print('*welcome*', self.sanitize(self.welcome))
./lib/python3.8/ftplib.py:            print('*put*', self.sanitize(line))
./lib/python3.8/ftplib.py:        if self.debugging: print('*cmd*', self.sanitize(line))
./lib/python3.8/ftplib.py:            print('*get*', self.sanitize(line))
./lib/python3.8/ftplib.py:            print('*resp*', self.sanitize(resp))
./lib/python3.8/ftplib.py:            print('*put urgent*', self.sanitize(line))
./lib/python3.8/ftplib.py:                    print('*retr*', repr(line))
./lib/python3.8/ftplib.py:    print(line)
./lib/python3.8/ftplib.py:        print(test.__doc__)
./lib/python3.8/pyclbr.py:            print("{}class {} {} {}"
./lib/python3.8/pyclbr.py:            print("{}def {} {}".format(' ' * obj.indent, obj.name, obj.lineno))
./lib/python3.8/abc.py:            print(f"Class: {cls.__module__}.{cls.__qualname__}", file=file)
./lib/python3.8/abc.py:            print(f"Inv. counter: {get_cache_token()}", file=file)
./lib/python3.8/abc.py:            print(f"_abc_registry: {_abc_registry!r}", file=file)
./lib/python3.8/abc.py:            print(f"_abc_cache: {_abc_cache!r}", file=file)
./lib/python3.8/abc.py:            print(f"_abc_negative_cache: {_abc_negative_cache!r}", file=file)
./lib/python3.8/abc.py:            print(f"_abc_negative_cache_version: {_abc_negative_cache_version!r}",
./lib/python3.8/sysconfig.py:            print('%s: ' % (title))
./lib/python3.8/sysconfig.py:        print('\t%s = "%s"' % (key, value))
./lib/python3.8/sysconfig.py:    print('Platform: "%s"' % get_platform())
./lib/python3.8/sysconfig.py:    print('Python version: "%s"' % get_python_version())
./lib/python3.8/sysconfig.py:    print('Current installation scheme: "%s"' % _get_default_scheme())
./lib/python3.8/sysconfig.py:    print()
./lib/python3.8/sysconfig.py:    print()
./lib/python3.8/_sitebuiltins.py:                    print(self.__lines[i])
./lib/python3.8/sndhdr.py:            print(filename + '/:', end=' ')
./lib/python3.8/sndhdr.py:                print('recursing down:')
./lib/python3.8/sndhdr.py:                print('*** directory (use -r) ***')
./lib/python3.8/sndhdr.py:            print(filename + ':', end=' ')
./lib/python3.8/sndhdr.py:                print(what(filename))
./lib/python3.8/sndhdr.py:                print('*** not found ***')
./lib/python3.8/poplib.py:        if self._debugging > 1: print('*put*', repr(line))
./lib/python3.8/poplib.py:        if self._debugging: print('*cmd*', repr(line))
./lib/python3.8/poplib.py:        if self._debugging > 1: print('*get*', repr(line))
./lib/python3.8/poplib.py:        if self._debugging > 1: print('*resp*', repr(resp))
./lib/python3.8/poplib.py:        if self._debugging: print('*stat*', repr(rets))
./lib/python3.8/poplib.py:    print(a.getwelcome())
./lib/python3.8/poplib.py:        print("Message %d:" % i)
./lib/python3.8/poplib.py:            print('   ' + line)
./lib/python3.8/poplib.py:        print('-----------------------')
./lib/python3.8/test/support/testresult.py:            print('stdout', file=sys.stdout)
./lib/python3.8/test/support/testresult.py:            print('stderr', file=sys.stderr)
./lib/python3.8/test/support/testresult.py:            print('stdout', file=sys.stdout)
./lib/python3.8/test/support/testresult.py:            print('stderr', file=sys.stderr)
./lib/python3.8/test/support/testresult.py:    print('Output:', stream.getvalue())
./lib/python3.8/test/support/testresult.py:    print('XML: ', end='')
./lib/python3.8/test/support/testresult.py:        print(s.decode(), end='')
./lib/python3.8/test/support/testresult.py:    print()
./lib/python3.8/test/support/__init__.py:            print('%s: %s' % (err.__class__.__name__, err))
./lib/python3.8/test/support/__init__.py:            print('re-run %s%r' % (func.__name__, args))
./lib/python3.8/test/support/__init__.py:                    print("support.rmtree(): os.lstat(%r) failed with %s" % (fullname, exc),
./lib/python3.8/test/support/__init__.py:            print('WARNING: The filename %r CAN be encoded by the filesystem encoding (%s). '
./lib/python3.8/test/support/__init__.py:        print('\tfetching %s ...' % url, file=get_original_stdout())
./lib/python3.8/test/support/__init__.py:           print("hello")
./lib/python3.8/test/support/__init__.py:           print("hello", file=sys.stderr)
./lib/python3.8/test/support/__init__.py:                print()
./lib/python3.8/test/support/__init__.py:                print(" ... expected peak memory use: {peak:.1f}G"
./lib/python3.8/test/support/__init__.py:        print('doctest (%s) ... %d tests with zero failures' %
./lib/python3.8/test/support/__init__.py:            print("Warning -- threading_cleanup() failed to cleanup "
./lib/python3.8/test/support/__init__.py:                print(f"Dangling thread: {thread!r}", file=sys.stderr)
./lib/python3.8/test/support/__init__.py:        print("Warning -- reap_children() reaped child process %s"
./lib/python3.8/test/support/__init__.py:                print("Can't start %d threads, only %d threads started" %
./lib/python3.8/test/support/__init__.py:                    print('Unable to join %d threads during a period of '
./lib/python3.8/test/support/__init__.py:                    print("failed to clean up {}: {}".format(link, ex))
./lib/python3.8/test/support/__init__.py:                print(repr(r[0]))
./lib/python3.8/test/support/__init__.py:                print(repr(r[1]), file=sys.stderr)
./lib/python3.8/test/support/__init__.py:                    print("this test triggers the Crash Reporter, "
./lib/python3.8/test/test_support.py:            print('foo = 1', file=f)
./lib/python3.8/test/test_support.py:            print("hello")
./lib/python3.8/test/test_support.py:            print("hello", file=sys.stderr)
./lib/python3.8/test/test_support.py:        code = f'from test.support import {func}; print(repr({func}()))'
./lib/python3.8/test/libregrtest/main.py:                    print(xml_data, file=sys.__stderr__)
./lib/python3.8/test/libregrtest/main.py:        print(line, flush=True)
./lib/python3.8/test/libregrtest/main.py:                print(msg, file=sys.stderr, flush=True)
./lib/python3.8/test/libregrtest/main.py:                print("Couldn't find starting test (%s), using all tests"
./lib/python3.8/test/libregrtest/main.py:            print(name)
./lib/python3.8/test/libregrtest/main.py:                    print(test.id())
./lib/python3.8/test/libregrtest/main.py:            print(file=sys.stderr)
./lib/python3.8/test/libregrtest/main.py:            print(count(len(self.skipped), "test"), "skipped:", file=sys.stderr)
./lib/python3.8/test/libregrtest/main.py:            print(count(len(self.bad), 'test'), "failed again:")
./lib/python3.8/test/libregrtest/main.py:        print()
./lib/python3.8/test/libregrtest/main.py:        print("== Tests result: %s ==" % self.get_tests_result())
./lib/python3.8/test/libregrtest/main.py:            print("Test suite interrupted by signal SIGINT.")
./lib/python3.8/test/libregrtest/main.py:            print()
./lib/python3.8/test/libregrtest/main.py:            print(count(len(omitted), "test"), "omitted:")
./lib/python3.8/test/libregrtest/main.py:            print()
./lib/python3.8/test/libregrtest/main.py:                print("All", end=' ')
./lib/python3.8/test/libregrtest/main.py:            print(count(len(self.good), "test"), "OK.")
./lib/python3.8/test/libregrtest/main.py:            print()
./lib/python3.8/test/libregrtest/main.py:            print("10 slowest tests:")
./lib/python3.8/test/libregrtest/main.py:                print("- %s: %s" % (test, format_duration(test_time)))
./lib/python3.8/test/libregrtest/main.py:            print()
./lib/python3.8/test/libregrtest/main.py:            print(count(len(self.bad), "test"), "failed:")
./lib/python3.8/test/libregrtest/main.py:            print()
./lib/python3.8/test/libregrtest/main.py:            print("{} altered the execution environment:".format(
./lib/python3.8/test/libregrtest/main.py:            print()
./lib/python3.8/test/libregrtest/main.py:            print(count(len(self.skipped), "test"), "skipped:")
./lib/python3.8/test/libregrtest/main.py:            print()
./lib/python3.8/test/libregrtest/main.py:            print("%s:" % count(len(self.rerun), "re-run test"))
./lib/python3.8/test/libregrtest/main.py:            print()
./lib/python3.8/test/libregrtest/main.py:            print(count(len(self.run_no_tests), "test"), "run no tests:")
./lib/python3.8/test/libregrtest/main.py:            print(previous_test)
./lib/python3.8/test/libregrtest/main.py:        print("==", platform.python_implementation(), *sys.version.split())
./lib/python3.8/test/libregrtest/main.py:        print("==", platform.platform(aliased=True),
./lib/python3.8/test/libregrtest/main.py:        print("== cwd:", os.getcwd())
./lib/python3.8/test/libregrtest/main.py:            print("== CPU count:", cpu_count)
./lib/python3.8/test/libregrtest/main.py:        print("== encodings: locale=%s, FS=%s"
./lib/python3.8/test/libregrtest/main.py:                print(msg, file=sys.stdout, flush=True)
./lib/python3.8/test/libregrtest/main.py:            print("Using random seed", self.ns.random_seed)
./lib/python3.8/test/libregrtest/main.py:        print()
./lib/python3.8/test/libregrtest/main.py:        print("Total duration: %s" % format_duration(duration))
./lib/python3.8/test/libregrtest/main.py:        print("Tests result: %s" % self.get_tests_result())
./lib/python3.8/test/libregrtest/main.py:        print("Cleanup %s directory" % self.tmp_dir)
./lib/python3.8/test/libregrtest/main.py:                print("Remove directory: %s" % name)
./lib/python3.8/test/libregrtest/main.py:                print("Remove file: %s" % name)
./lib/python3.8/test/libregrtest/main.py:                print(f'Failed to create WindowsLoadTracker: {error}')
./lib/python3.8/test/libregrtest/save_env.py:                    print(f"  Before: {original}\n  After:  {current} ",
./lib/python3.8/test/libregrtest/runtest_mp.py:    print()   # Force a newline (just in case)
./lib/python3.8/test/libregrtest/runtest_mp.py:    print(json.dumps(list(result)), flush=True)
./lib/python3.8/test/libregrtest/runtest_mp.py:        print(f"Kill {self}", file=sys.stderr, flush=True)
./lib/python3.8/test/libregrtest/runtest_mp.py:            print(mp_result.stdout, flush=True)
./lib/python3.8/test/libregrtest/runtest_mp.py:            print(mp_result.stderr, file=sys.stderr, flush=True)
./lib/python3.8/test/libregrtest/runtest_mp.py:            print()
./lib/python3.8/test/libregrtest/runtest.py:            print(f"test {test_name} crashed -- {msg}",
./lib/python3.8/test/libregrtest/runtest.py:        print(error, file=sys.stderr)
./lib/python3.8/test/libregrtest/runtest.py:            print(f"{test_name} skipped -- {msg}", flush=True)
./lib/python3.8/test/libregrtest/runtest.py:            print(f"{test_name} skipped -- {msg}", flush=True)
./lib/python3.8/test/libregrtest/runtest.py:        print(msg, file=sys.stderr, flush=True)
./lib/python3.8/test/libregrtest/runtest.py:        print()
./lib/python3.8/test/libregrtest/runtest.py:            print(f"test {test_name} crashed -- {msg}",
./lib/python3.8/test/libregrtest/utils.py:    print(textwrap.fill(' '.join(str(elt) for elt in sorted(x)), width,
./lib/python3.8/test/libregrtest/utils.py:    print(f"Warning -- {msg}", file=sys.stderr, flush=True)
./lib/python3.8/test/libregrtest/cmdline.py:        print("Warning: the --nowindows (-n) option is deprecated. "
./lib/python3.8/test/libregrtest/cmdline.py:        print("WARNING: Disable --verbose3 because it's incompatible with "
./lib/python3.8/test/libregrtest/refleak.py:        print("beginning", repcount, "repetitions", file=sys.stderr)
./lib/python3.8/test/libregrtest/refleak.py:        print(("1234567890"*(repcount//10 + 1))[:repcount], file=sys.stderr,
./lib/python3.8/test/libregrtest/refleak.py:            print('.', end='', file=sys.stderr, flush=True)
./lib/python3.8/test/libregrtest/refleak.py:        print(file=sys.stderr)
./lib/python3.8/test/libregrtest/refleak.py:            print(msg, file=sys.stderr, flush=True)
./lib/python3.8/test/libregrtest/refleak.py:                print(msg, file=refrep)
./lib/python3.8/threading.py:        print(f"Exception in thread {name}:",
./lib/python3.8/curses/textpad.py:    print('Contents of text box:', repr(str))
./lib/python3.8/curses/has_key.py:        for i in L: print(i)
./lib/python3.8/dis.py:                print("Disassembly of %s:" % name, file=file)
./lib/python3.8/dis.py:                    print("Sorry:", msg, file=file)
./lib/python3.8/dis.py:                print(file=file)
./lib/python3.8/dis.py:    print(code_info(co), file=file)
./lib/python3.8/dis.py:                print(file=file)
./lib/python3.8/dis.py:                print("Disassembly of %r:" % (x,), file=file)
./lib/python3.8/dis.py:            print(file=file)
./lib/python3.8/dis.py:        print(instr._disassemble(lineno_width, is_current_instr, offset_width),
./lib/python3.8/timeit.py:        print(err)
./lib/python3.8/timeit.py:        print("use -h/--help for command line help")
./lib/python3.8/timeit.py:                print("Unrecognized unit. Please select nsec, usec, msec, or sec.",
./lib/python3.8/timeit.py:            print(__doc__, end=' ')
./lib/python3.8/timeit.py:                print(msg.format(num=number, s='s' if plural else '',
./lib/python3.8/timeit.py:            print()
./lib/python3.8/timeit.py:        print("raw times: %s" % ", ".join(map(format_time, raw_timings)))
./lib/python3.8/timeit.py:        print()
./lib/python3.8/timeit.py:    print("%d loop%s, best of %d: %s per loop"
./lib/python3.8/warnings.py:            print("Invalid -W option ignored:", msg, file=sys.stderr)
./lib/python3.8/random.py:    print(n, 'times', func.__name__)
./lib/python3.8/random.py:    print(round(t1-t0, 3), 'sec,', end=' ')
./lib/python3.8/random.py:    print('avg %g, stddev %g, min %g, max %g\n' % \
./lib/python3.8/uu.py:                print(sys.argv[0], ': cannot do -t to stdout')
./lib/python3.8/uu.py:                print(sys.argv[0], ': cannot do -t from stdin')
./lib/python3.8/antigravity.py:    print('%d%s %d%s' % (latitude, p[1:], longitude, q[1:]))
./lib/python3.8/wsgiref/simple_server.py:    print("Hello world!", file=stdout)
./lib/python3.8/wsgiref/simple_server.py:    print(file=stdout)
./lib/python3.8/wsgiref/simple_server.py:        print(k,'=',repr(v), file=stdout)
./lib/python3.8/wsgiref/simple_server.py:        print("Serving HTTP on", sa[0], "port", sa[1], "...")
./lib/python3.8/formatter.py:        print("new_alignment(%r)" % (align,))
./lib/python3.8/formatter.py:        print("new_font(%r)" % (font,))
./lib/python3.8/formatter.py:        print("new_margin(%r, %d)" % (margin, level))
./lib/python3.8/formatter.py:        print("new_spacing(%r)" % (spacing,))
./lib/python3.8/formatter.py:        print("new_styles(%r)" % (styles,))
./lib/python3.8/formatter.py:        print("send_paragraph(%r)" % (blankline,))
./lib/python3.8/formatter.py:        print("send_line_break()")
./lib/python3.8/formatter.py:        print("send_hor_rule()")
./lib/python3.8/formatter.py:        print("send_label_data(%r)" % (data,))
./lib/python3.8/formatter.py:        print("send_flowing_data(%r)" % (data,))
./lib/python3.8/formatter.py:        print("send_literal_data(%r)" % (data,))
./lib/python3.8/_pydecimal.py:>>> print(dig / Decimal(3))
./lib/python3.8/_pydecimal.py:>>> print(dig / Decimal(3))
./lib/python3.8/_pydecimal.py:>>> print(dig.sqrt())
./lib/python3.8/_pydecimal.py:>>> print(Decimal(3).sqrt())
./lib/python3.8/_pydecimal.py:>>> print(Decimal(3) ** 123)
./lib/python3.8/_pydecimal.py:>>> print(inf)
./lib/python3.8/_pydecimal.py:>>> print(neginf)
./lib/python3.8/_pydecimal.py:>>> print(neginf + inf)
./lib/python3.8/_pydecimal.py:>>> print(neginf * inf)
./lib/python3.8/_pydecimal.py:>>> print(dig / 0)
./lib/python3.8/_pydecimal.py:>>> print(dig / 0)
./lib/python3.8/_pydecimal.py:>>> print(c.flags[InvalidOperation])
./lib/python3.8/_pydecimal.py:>>> print(c.flags[InvalidOperation])
./lib/python3.8/_pydecimal.py:>>> print(c.flags[InvalidOperation])
./lib/python3.8/_pydecimal.py:>>> print(c.divide(Decimal(0), Decimal(0)))
./lib/python3.8/_pydecimal.py:>>> print(c.flags[InvalidOperation])
./lib/python3.8/_pydecimal.py:>>> print(c.divide(Decimal(0), Decimal(0)))
./lib/python3.8/_pydecimal.py:>>> print(c.flags[InvalidOperation])
./lib/python3.8/_pydecimal.py:    >>> print(getcontext().prec)
./lib/python3.8/_pydecimal.py:    ...     print(ctx.prec)
./lib/python3.8/_pydecimal.py:    ...     print(getcontext().prec)
./lib/python3.8/_pydecimal.py:    >>> print(getcontext().prec)
./lib/python3.8/_pydecimal.py:        >>> print(c.flags[InvalidOperation])
./lib/python3.8/_pydecimal.py:        >>> print(c.flags[InvalidOperation])
./lib/python3.8/_pydecimal.py:        >>> print(c.flags[InvalidOperation])
./lib/python3.8/_pydecimal.py:        >>> print(c.flags[InvalidOperation])
./lib/python3.8/dbm/__init__.py:        print(whichdb(filename) or "UNKNOWN", filename)
./lib/python3.8/http/cookies.py:   >>> print(C.output(header="Cookie:"))
./lib/python3.8/http/cookies.py:   >>> print(C.output(attrs=[], header="Cookie:"))
./lib/python3.8/http/cookies.py:   >>> print(C)
./lib/python3.8/http/cookies.py:   >>> print(C)
./lib/python3.8/http/client.py:            print("reply:", repr(line))
./lib/python3.8/http/client.py:                    print("header:", skip)
./lib/python3.8/http/client.py:                print("header:", hdr + ":", val)
./lib/python3.8/http/client.py:                print('header:', line.decode())
./lib/python3.8/http/client.py:            print("send:", repr(data))
./lib/python3.8/http/client.py:                print("sendIng a read()able")
./lib/python3.8/http/client.py:                print("encoding file using iso-8859-1")
./lib/python3.8/http/client.py:            print("sendIng a read()able")
./lib/python3.8/http/client.py:            print("encoding file using iso-8859-1")
./lib/python3.8/http/client.py:                        print('Zero length chunk ignored')
./lib/python3.8/http/client.py:                            print('Unable to determine size of %r' % body)
./lib/python3.8/http/server.py:        print(
./lib/python3.8/http/server.py:            print("\nKeyboard interrupt received, exiting.")
./lib/python3.8/lib2to3/main.py:                                print(line)
./lib/python3.8/lib2to3/main.py:                            print(line)
./lib/python3.8/lib2to3/main.py:    print("WARNING: %s" % (msg,), file=sys.stderr)
./lib/python3.8/lib2to3/main.py:                      help="Modify the grammar so that print() is a function")
./lib/python3.8/lib2to3/main.py:        print("Available transformations for the -f/--fix option:")
./lib/python3.8/lib2to3/main.py:            print(fixname)
./lib/python3.8/lib2to3/main.py:        print("At least one file or directory argument required.", file=sys.stderr)
./lib/python3.8/lib2to3/main.py:        print("Use --help to show usage.", file=sys.stderr)
./lib/python3.8/lib2to3/main.py:            print("Can't write to stdin.", file=sys.stderr)
./lib/python3.8/lib2to3/main.py:                print("Sorry, -j isn't supported on this platform.",
./lib/python3.8/lib2to3/pgen2/literals.py:            print(i, c, s, e)
./lib/python3.8/lib2to3/pgen2/conv.py:            print("Can't open %s: %s" % (filename, err))
./lib/python3.8/lib2to3/pgen2/conv.py:                print("%s(%s): can't parse %s" % (filename, lineno,
./lib/python3.8/lib2to3/pgen2/conv.py:            print("Can't open %s: %s" % (filename, err))
./lib/python3.8/lib2to3/pgen2/pgen.py:        print("Dump of NFA for", name)
./lib/python3.8/lib2to3/pgen2/pgen.py:            print("  State", i, state is finish and "(final)" or "")
./lib/python3.8/lib2to3/pgen2/pgen.py:                    print("    -> %d" % j)
./lib/python3.8/lib2to3/pgen2/pgen.py:                    print("    %s -> %d" % (label, j))
./lib/python3.8/lib2to3/pgen2/pgen.py:        print("Dump of DFA for", name)
./lib/python3.8/lib2to3/pgen2/pgen.py:            print("  State", i, state.isfinal and "(final)" or "")
./lib/python3.8/lib2to3/pgen2/pgen.py:                print("    %s -> %d" % (label, dfa.index(next)))
./lib/python3.8/lib2to3/pgen2/tokenize.py:    print("%d,%d-%d,%d:\t%s\t%s" % \
./lib/python3.8/lib2to3/pgen2/grammar.py:        print("s2n")
./lib/python3.8/lib2to3/pgen2/grammar.py:        print("n2s")
./lib/python3.8/lib2to3/pgen2/grammar.py:        print("states")
./lib/python3.8/lib2to3/pgen2/grammar.py:        print("dfas")
./lib/python3.8/lib2to3/pgen2/grammar.py:        print("labels")
./lib/python3.8/lib2to3/pgen2/grammar.py:        print("start", self.start)
./lib/python3.8/lib2to3/btm_matcher.py:        print("digraph g{")
./lib/python3.8/lib2to3/btm_matcher.py:                print("%d -> %d [label=%s] //%s" %
./lib/python3.8/lib2to3/btm_matcher.py:                    print(subnode.content)
./lib/python3.8/lib2to3/btm_matcher.py:        print("}")
./lib/python3.8/lib2to3/fixes/fix_print.py:        # Now synthesize a print(args, sep=..., end=..., file=...) node.
./lib/python3.8/smtpd.py:    print(__doc__ % globals(), file=sys.stderr)
./lib/python3.8/smtpd.py:        print(msg, file=sys.stderr)
./lib/python3.8/smtpd.py:        print('Peer:', repr(self.peer), file=DEBUGSTREAM)
./lib/python3.8/smtpd.py:        print('Data:', repr(line), file=DEBUGSTREAM)
./lib/python3.8/smtpd.py:        print('===> MAIL', arg, file=DEBUGSTREAM)
./lib/python3.8/smtpd.py:        print('sender:', self.mailfrom, file=DEBUGSTREAM)
./lib/python3.8/smtpd.py:        print('===> RCPT', arg, file=DEBUGSTREAM)
./lib/python3.8/smtpd.py:        print('recips:', self.rcpttos, file=DEBUGSTREAM)
./lib/python3.8/smtpd.py:            print('%s started at %s\n\tLocal addr: %s\n\tRemote addr:%s' % (
./lib/python3.8/smtpd.py:        print('Incoming connection from %s' % repr(addr), file=DEBUGSTREAM)
./lib/python3.8/smtpd.py:                print(peerheader)
./lib/python3.8/smtpd.py:            print(line)
./lib/python3.8/smtpd.py:        print('---------- MESSAGE FOLLOWS ----------')
./lib/python3.8/smtpd.py:                print('mail options: %s' % kwargs['mail_options'])
./lib/python3.8/smtpd.py:                print('rcpt options: %s\n' % kwargs['rcpt_options'])
./lib/python3.8/smtpd.py:        print('------------ END MESSAGE ------------')
./lib/python3.8/smtpd.py:        print('we got some refusals:', refused, file=DEBUGSTREAM)
./lib/python3.8/smtpd.py:            print('got SMTPRecipientsRefused', file=DEBUGSTREAM)
./lib/python3.8/smtpd.py:            print('got', e.__class__, file=DEBUGSTREAM)
./lib/python3.8/smtpd.py:        print('forwarding recips:', ' '.join(rcpttos), file=DEBUGSTREAM)
./lib/python3.8/smtpd.py:            print('we got refusals:', refused, file=DEBUGSTREAM)
./lib/python3.8/smtpd.py:            print('sending message to', rcpt, file=DEBUGSTREAM)
./lib/python3.8/smtpd.py:            print(__version__)
./lib/python3.8/smtpd.py:                print('Invalid size: ' + arg, file=sys.stderr)
./lib/python3.8/smtpd.py:            print('Cannot import module "pwd"; try running with -n option.', file=sys.stderr)
./lib/python3.8/smtpd.py:            print('Cannot setuid "nobody"; try running with -n option.', file=sys.stderr)
./lib/python3.8/webbrowser.py:        print(msg, file=sys.stderr)
./lib/python3.8/webbrowser.py:        print(usage, file=sys.stderr)
./lib/python3.8/webbrowser.py:        print(usage, file=sys.stderr)
./lib/python3.8/webbrowser.py:    print("\a")
./lib/python3.8/shlex.py:            print("shlex: pushing token " + repr(tok))
./lib/python3.8/shlex.py:                print('shlex: pushing to file %s' % (self.infile,))
./lib/python3.8/shlex.py:                print('shlex: pushing to stream %s' % (self.instream,))
./lib/python3.8/shlex.py:            print('shlex: popping to %s, line %d' \
./lib/python3.8/shlex.py:                print("shlex: popping token " + repr(tok))
./lib/python3.8/shlex.py:                print("shlex: token=" + repr(raw))
./lib/python3.8/shlex.py:                print("shlex: token=EOF")
./lib/python3.8/shlex.py:                print("shlex: in state %r I see character: %r" % (self.state,
./lib/python3.8/shlex.py:                        print("shlex: I see whitespace in whitespace state")
./lib/python3.8/shlex.py:                        print("shlex: I see EOF in quotes state")
./lib/python3.8/shlex.py:                        print("shlex: I see EOF in escape state")
./lib/python3.8/shlex.py:                        print("shlex: I see whitespace in word state")
./lib/python3.8/shlex.py:                        print("shlex: I see punctuation in word state")
./lib/python3.8/shlex.py:                print("shlex: raw token=" + repr(result))
./lib/python3.8/shlex.py:                print("shlex: raw token=EOF")
./lib/python3.8/shlex.py:        print("Token: " + repr(tt))
./lib/python3.8/unittest/main.py:            print(msg)
./lib/python3.8/unittest/main.py:            print(self._main_parser.format_help())
./lib/python3.8/unittest/main.py:            print(MAIN_EXAMPLES % {'prog': self.progName})
./lib/python3.8/unittest/main.py:            print(self._main_parser.format_help())
./lib/python3.8/unittest/main.py:            print(MODULE_EXAMPLES % {'prog': self.progName})
./lib/python3.8/runpy.py:        print("No module specified for execution", file=sys.stderr)
./lib/python3.8/_py_abc.py:        print(f"Class: {cls.__module__}.{cls.__qualname__}", file=file)
./lib/python3.8/_py_abc.py:        print(f"Inv. counter: {get_cache_token()}", file=file)
./lib/python3.8/_py_abc.py:                print(f"{name}: {value!r}", file=file)
./lib/python3.8/statistics.py:        print(f'\nTest {func.__name__} with another NormalDist:')
./lib/python3.8/statistics.py:        print(func(g1, g2))
./lib/python3.8/statistics.py:        print(NormalDist.from_samples(map(func, G1, G2)))
./lib/python3.8/statistics.py:        print(f'\nTest {func.__name__} with a constant:')
./lib/python3.8/statistics.py:        print(func(g1, const))
./lib/python3.8/statistics.py:        print(NormalDist.from_samples(map(func, G1, repeat(const))))
./lib/python3.8/statistics.py:        print(f'\nTest constant with {func.__name__}:')
./lib/python3.8/statistics.py:        print(func(const, g1))
./lib/python3.8/statistics.py:        print(NormalDist.from_samples(map(func, repeat(const), G1)))
./lib/python3.8/statistics.py:    print(doctest.testmod())
./lib/python3.8/asyncio/runners.py:            print('hello')
./lib/python3.8/asyncio/base_tasks.py:        print(f'No stack for {task!r}', file=file)
./lib/python3.8/asyncio/base_tasks.py:        print(f'Traceback for {task!r} (most recent call last):', file=file)
./lib/python3.8/asyncio/base_tasks.py:        print(f'Stack for {task!r} (most recent call last):', file=file)
./lib/python3.8/asyncio/base_tasks.py:            print(line, file=file, end='')
./lib/python3.8/heapq.py:    print(doctest.testmod()) # pragma: no cover
./lib/python3.8/turtle.py:# print(_ver)
./lib/python3.8/turtle.py:            print("Bad line in config-file %s:\n%s" % (filename,line))
./lib/python3.8/turtle.py:                print("Unwahrscheinlich in _undogoto!")
./lib/python3.8/turtle.py:            print("Bad docstring-entry: %s" % key)
./lib/python3.8/turtle.py:    print("Cannot find docsdict for", _LANGUAGE)
./lib/python3.8/turtle.py:            print(">>>>>>", pl1, pl2)
./lib/python3.8/sre_constants.py:    print("done")
./lib/python3.8/aifc.py:        print("Reading", fn)
./lib/python3.8/aifc.py:        print("nchannels =", f.getnchannels())
./lib/python3.8/aifc.py:        print("nframes   =", f.getnframes())
./lib/python3.8/aifc.py:        print("sampwidth =", f.getsampwidth())
./lib/python3.8/aifc.py:        print("framerate =", f.getframerate())
./lib/python3.8/aifc.py:        print("comptype  =", f.getcomptype())
./lib/python3.8/aifc.py:        print("compname  =", f.getcompname())
./lib/python3.8/aifc.py:            print("Writing", gn)
./lib/python3.8/aifc.py:            print("Done.")
./lib/python3.8/mimetypes.py:        print(USAGE)
./lib/python3.8/mimetypes.py:        if msg: print(msg)
./lib/python3.8/mimetypes.py:            if not guess: print("I don't know anything about type", gtype)
./lib/python3.8/mimetypes.py:            else: print(guess)
./lib/python3.8/mimetypes.py:            if not guess: print("I don't know anything about type", gtype)
./lib/python3.8/mimetypes.py:            else: print('type:', guess, 'encoding:', encoding)
./lib/python3.8/gzip.py:                    print("filename doesn't end in .gz:", repr(arg))
./lib/python3.8/pydoc_data/topics.py:               '   print(x)\n'
./lib/python3.8/pydoc_data/topics.py:                     "           print(f'Setting {attr}...')\n"
./lib/python3.8/pydoc_data/topics.py:          '   ...     print(a, b)\n'
./lib/python3.8/pydoc_data/topics.py:             '   if test1: if test2: print(x)\n'
./lib/python3.8/pydoc_data/topics.py:             '   if x < y < z: print(x); print(y); print(z)\n'
./lib/python3.8/pydoc_data/topics.py:             '       print(i)\n'
./lib/python3.8/pydoc_data/topics.py:                  '     "import sys; print(sys.hash_info.width)"".\n'
./lib/python3.8/pydoc_data/topics.py:             '       print(spam)\n'
./lib/python3.8/pydoc_data/topics.py:             '   -> print(spam)\n'
./lib/python3.8/pydoc_data/topics.py:                     '       print(i)\n'
./lib/python3.8/pydoc_data/topics.py:              '       print(i)\n'
./lib/python3.8/pydoc_data/topics.py:        '       print(i)\n'
./lib/python3.8/pydoc_data/topics.py:                  "   ...         print('{0:{width}{base}}'.format(num, "
./lib/python3.8/pydoc_data/topics.py:                  '   ...     print()\n'
./lib/python3.8/pydoc_data/topics.py:           '       print(i)\n'
./lib/python3.8/pydoc_data/topics.py:          '   ...     print(1 / 0)\n'
./lib/python3.8/pydoc_data/topics.py:          '   ...     print(1 / 0)\n'
./lib/python3.8/pydoc_data/topics.py:          '   ...     print(1 / 0)\n'
./lib/python3.8/pydoc_data/topics.py:                 '     "import sys; print(sys.hash_info.width)"".\n'
./lib/python3.8/pydoc_data/topics.py:                 "           print(f'Setting {attr}...')\n"
./lib/python3.8/pydoc_data/topics.py:                 '   ...         print("Metaclass getattribute invoked")\n'
./lib/python3.8/pydoc_data/topics.py:                 '   ...         print("Class getattribute invoked")\n'
./lib/python3.8/pydoc_data/topics.py:                 '   >>> print(n)\n'
./lib/python3.8/fileinput.py:        print("%d: %s[%d]%s %s" % (lineno(), filename(), filelineno(),
./lib/python3.8/fileinput.py:    print("%d: %s[%d]" % (lineno(), filename(), filelineno()))
./lib/python3.8/difflib.py:    >>> print(round(s.ratio(), 3))
./lib/python3.8/difflib.py:    ...     print("a[%d] and b[%d] match for %d elements" % block)
./lib/python3.8/difflib.py:    ...     print("%6s a[%d:%d] b[%d:%d]" % opcode)
./lib/python3.8/difflib.py:        ...    print(("%7s a[%d:%d] (%s) b[%d:%d] (%s)" %
./lib/python3.8/difflib.py:    >>> print(''.join(result), end="")
./lib/python3.8/difflib.py:        >>> print(''.join(Differ().compare('one\ntwo\nthree\n'.splitlines(True),
./lib/python3.8/difflib.py:        >>> print(''.join(results), end="")
./lib/python3.8/difflib.py:        >>> for line in results: print(repr(line))
./lib/python3.8/difflib.py:    ...     print(line)                 # doctest: +NORMALIZE_WHITESPACE
./lib/python3.8/difflib.py:    >>> print(''.join(context_diff('one\ntwo\nthree\nfour\n'.splitlines(True),
./lib/python3.8/difflib.py:    >>> print(''.join(diff), end="")
./lib/python3.8/difflib.py:    >>> print(''.join(restore(diff, 1)), end="")
./lib/python3.8/difflib.py:    >>> print(''.join(restore(diff, 2)), end="")
./lib/python3.8/modulefinder.py:                print("   ", end=' ')
./lib/python3.8/modulefinder.py:            print(str, end=' ')
./lib/python3.8/modulefinder.py:                print(repr(arg), end=' ')
./lib/python3.8/modulefinder.py:            print()
./lib/python3.8/modulefinder.py:        print()
./lib/python3.8/modulefinder.py:        print("  %-25s %s" % ("Name", "File"))
./lib/python3.8/modulefinder.py:        print("  %-25s %s" % ("----", "----"))
./lib/python3.8/modulefinder.py:                print("P", end=' ')
./lib/python3.8/modulefinder.py:                print("m", end=' ')
./lib/python3.8/modulefinder.py:            print("%-25s" % key, m.__file__ or "")
./lib/python3.8/modulefinder.py:            print()
./lib/python3.8/modulefinder.py:            print("Missing modules:")
./lib/python3.8/modulefinder.py:                print("?", name, "imported from", ', '.join(mods))
./lib/python3.8/modulefinder.py:            print()
./lib/python3.8/modulefinder.py:            print("Submodules that appear to be missing, but could also be", end=' ')
./lib/python3.8/modulefinder.py:            print("global names in the parent package:")
./lib/python3.8/modulefinder.py:                print("?", name, "imported from", ', '.join(mods))
./lib/python3.8/modulefinder.py:        print(msg)
./lib/python3.8/modulefinder.py:        print("path:")
./lib/python3.8/modulefinder.py:            print("   ", repr(item))
./lib/python3.8/modulefinder.py:        print("\n[interrupted]")
./lib/python3.8/logging/__init__.py:                print("Ignoring exception from logging atfork", instance,
./lib/python3.8/logging/handlers.py:            print("The Python Win32 extensions for NT (service, event "\
./lib/python3.8/urllib/request.py:            print()
./lib/python3.8/filecmp.py:                # print('Can\'t stat', a_path, ':', why.args[1])
./lib/python3.8/filecmp.py:                # print('Can\'t stat', b_path, ':', why.args[1])
./lib/python3.8/filecmp.py:        print('diff', self.left, self.right)
./lib/python3.8/filecmp.py:            print('Only in', self.left, ':', self.left_only)
./lib/python3.8/filecmp.py:            print('Only in', self.right, ':', self.right_only)
./lib/python3.8/filecmp.py:            print('Identical files :', self.same_files)
./lib/python3.8/filecmp.py:            print('Differing files :', self.diff_files)
./lib/python3.8/filecmp.py:            print('Trouble with common files :', self.funny_files)
./lib/python3.8/filecmp.py:            print('Common subdirectories :', self.common_dirs)
./lib/python3.8/filecmp.py:            print('Common funny cases :', self.common_funny)
./lib/python3.8/filecmp.py:            print()
./lib/python3.8/filecmp.py:            print()
./lib/python3.8/symtable.py:        print(info, info.is_local(), info.is_namespace())
./lib/python3.8/platform.py:    print(platform(aliased, terse))
./lib/python3.8/asyncore.py:            print('%s: %s' % (type, message))
./lib/python3.8/smtplib.py:  >>> print(s.help())
./lib/python3.8/smtplib.py:            print(datetime.datetime.now().time(), *args, file=sys.stderr)
./lib/python3.8/smtplib.py:            print(*args, file=sys.stderr)
./lib/python3.8/smtplib.py:    print("Enter message, end with ^D:")
./lib/python3.8/smtplib.py:    print("Message length is %d" % len(msg))
./lib/python3.8/netrc.py:    print(netrc())
./lib/python3.8/zipapp.py:        print("Interpreter: {}".format(interpreter or "<none>"))
./lib/python3.8/email/generator.py:                print(part.get_payload(decode=False), file=self)
./lib/python3.8/email/generator.py:                print(self._fmt % {
./lib/python3.8/email/_header_value_parser.py:        print(self.ppstr(indent=indent))
./lib/python3.8/email/_header_value_parser.py:        print(self.__class__.__name__ + '/' + self.token_type)
./lib/python3.8/email/iterators.py:    print(tab + msg.get_content_type(), end='', file=fp)
./lib/python3.8/email/iterators.py:        print(' [%s]' % msg.get_default_type(), file=fp)
./lib/python3.8/email/iterators.py:        print(file=fp)
./lib/python3.8/trace.py:                print(("Skipping counts file %r: %s"
./lib/python3.8/trace.py:            print()
./lib/python3.8/trace.py:            print("functions called:")
./lib/python3.8/trace.py:                print(("filename: %s, modulename: %s, funcname: %s"
./lib/python3.8/trace.py:            print()
./lib/python3.8/trace.py:            print("calling relationships:")
./lib/python3.8/trace.py:                    print()
./lib/python3.8/trace.py:                    print("***", pfile, "***")
./lib/python3.8/trace.py:                    print("  -->", cfile)
./lib/python3.8/trace.py:                print("    %s.%s -> %s.%s" % (pmod, pfunc, cmod, cfunc))
./lib/python3.8/trace.py:            print("lines   cov%   module   (path)")
./lib/python3.8/trace.py:                print("%5d   %3d%%   %s   (%s)" % sums[m])
./lib/python3.8/trace.py:                print("Can't save counts files because %s" % err, file=sys.stderr)
./lib/python3.8/trace.py:            print(("trace: Could not open %r for writing: %s "
./lib/python3.8/trace.py:        print(("Not printing coverage data for %r: %s"
./lib/python3.8/trace.py:                            print((" --- modulename: %s, funcname: %s"
./lib/python3.8/trace.py:                print('%.2f' % (_time() - self.start_time), end=' ')
./lib/python3.8/trace.py:            print("%s(%d): %s" % (bname, lineno,
./lib/python3.8/trace.py:                print('%.2f' % (_time() - self.start_time), end=' ')
./lib/python3.8/trace.py:            print("%s(%d): %s" % (bname, lineno,
./lib/python3.8/importlib/_bootstrap.py:        print(message.format(*args), file=sys.stderr)
./lib/python3.8/json/__init__.py:    >>> print(json.dumps("\"foo\bar"))
./lib/python3.8/json/__init__.py:    >>> print(json.dumps('\u1234'))
./lib/python3.8/json/__init__.py:    >>> print(json.dumps('\\'))
./lib/python3.8/json/__init__.py:    >>> print(json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True))
./lib/python3.8/json/__init__.py:    >>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4))
./lib/python3.8/doctest.py:            print('Finding tests in %s' % name)
./lib/python3.8/doctest.py:        ...     print(test.name, '->', runner.run(test))
./lib/python3.8/doctest.py:                print(len(notests), "items had no tests:")
./lib/python3.8/doctest.py:                    print("   ", thing)
./lib/python3.8/doctest.py:                print(len(passed), "items passed all tests:")
./lib/python3.8/doctest.py:                    print(" %3d tests in %s" % (count, thing))
./lib/python3.8/doctest.py:            print(self.DIVIDER)
./lib/python3.8/doctest.py:            print(len(failed), "items had failures:")
./lib/python3.8/doctest.py:                print(" %3d of %3d in %s" % (f, t, thing))
./lib/python3.8/doctest.py:            print(totalt, "tests in", len(self._name2ft), "items.")
./lib/python3.8/doctest.py:            print(totalt - totalf, "passed and", totalf, "failed.")
./lib/python3.8/doctest.py:            print("***Test Failed***", totalf, "failures.")
./lib/python3.8/doctest.py:            print("Test passed.")
./lib/python3.8/doctest.py:       >>> print(script_from_examples(text))
./lib/python3.8/doctest.py:            print(sys.exc_info()[1])
./lib/python3.8/doctest.py:        >>> print(t.get())
./lib/python3.8/doctest.py:        >>> print(x.get())
./lib/python3.8/doctest.py:                    >>> print('foo\n\nbar\n')
./lib/python3.8/doctest.py:                    >>> print(list(range(1000))) #doctest: +ELLIPSIS
./lib/python3.8/doctest.py:                    >>> print(list(range(30))) #doctest: +NORMALIZE_WHITESPACE
./lib/python3.8/pickletools.py:                print("skipping %r: it doesn't look like an opcode name" % name)
./lib/python3.8/pickletools.py:                print(("skipping %r: value %r doesn't look like a pickle "
./lib/python3.8/pickletools.py:                print("checking name %r w/ code %r for consistency" % (
./lib/python3.8/pickletools.py:            print("%5d:" % pos, end=' ', file=out)
./lib/python3.8/pickletools.py:        print(line, file=out)
./lib/python3.8/pickletools.py:    print("highest protocol among opcodes =", maxproto, file=out)
./lib/python3.8/bdb.py:        print('bdb.Bdb.dispatch: unknown debugging event:', repr(event))
./lib/python3.8/bdb.py:        print(self.bpformat(), file=out)
./lib/python3.8/bdb.py:        print('+++ call', name, args)
./lib/python3.8/bdb.py:        print('+++', fn, frame.f_lineno, name, ':', line.strip())
./lib/python3.8/bdb.py:        print('+++ return', retval)
./lib/python3.8/bdb.py:        print('+++ exception', exc_stuff)
./lib/python3.8/bdb.py:    print('foo(', n, ')')
./lib/python3.8/bdb.py:    print('bar returned', x)
./lib/python3.8/bdb.py:    print('bar(', a, ')')
./lib/python3.8/nntplib.py:>>> print('Group', name, 'has', count, 'articles, range', first, 'to', last)
./lib/python3.8/nntplib.py:        if self.debugging: print('*welcome*', repr(self.welcome))
./lib/python3.8/nntplib.py:        if self.debugging > 1: print('*put*', repr(line))
./lib/python3.8/nntplib.py:        if self.debugging: print('*cmd*', repr(line))
./lib/python3.8/nntplib.py:            print('*get*', repr(line))
./lib/python3.8/nntplib.py:        if self.debugging: print('*resp*', repr(resp))
./lib/python3.8/nntplib.py:    print('Group', name, 'has', count, 'articles, range', first, 'to', last)
./lib/python3.8/nntplib.py:        print("{:7} {:20} {:42} ({})".format(
./lib/python3.8/xmlrpc/client.py:                print("body:", repr(data))
./lib/python3.8/xmlrpc/client.py:        print(server.currentTime.getCurrentTime())
./lib/python3.8/xmlrpc/client.py:        print("ERROR", v)
./lib/python3.8/xmlrpc/client.py:            print(response)
./lib/python3.8/xmlrpc/client.py:        print("ERROR", v)
./lib/python3.8/xmlrpc/server.py:        print('Content-Type: text/xml')
./lib/python3.8/xmlrpc/server.py:        print('Content-Length: %d' % len(response))
./lib/python3.8/xmlrpc/server.py:        print()
./lib/python3.8/xmlrpc/server.py:        print('Status: %d %s' % (code, message))
./lib/python3.8/xmlrpc/server.py:        print('Content-Type: %s' % http.server.DEFAULT_ERROR_CONTENT_TYPE)
./lib/python3.8/xmlrpc/server.py:        print('Content-Length: %d' % len(response))
./lib/python3.8/xmlrpc/server.py:        print()
./lib/python3.8/xmlrpc/server.py:        print('Content-Type: text/html')
./lib/python3.8/xmlrpc/server.py:        print('Content-Length: %d' % len(response))
./lib/python3.8/xmlrpc/server.py:        print()
./lib/python3.8/xmlrpc/server.py:        print('Serving XML-RPC on localhost port 8000')
./lib/python3.8/xmlrpc/server.py:        print('It is advisable to run this example server within a secure, closed network.')
./lib/python3.8/xmlrpc/server.py:            print("\nKeyboard interrupt received, exiting.")
./lib/python3.8/pipes.py:            print(cmd)
./lib/python3.8/textwrap.py:    print(dedent("Hello there.\n  This is indented."))
./lib/python3.8/profile.py:            print("elapsed time without profiling =", elapsed_noprofile)
./lib/python3.8/profile.py:            print("elapsed time with profiling =", elapsed_profile)
./lib/python3.8/profile.py:            print("'CPU seconds' profiler reported =", reported_time)
./lib/python3.8/profile.py:            print("total # calls =", total_calls)
./lib/python3.8/profile.py:            print("mean stopwatch overhead per profile event =", mean)
./lib/python3.8/compileall.py:        print('Listing {!r}...'.format(dir))
./lib/python3.8/compileall.py:            print("Can't list {!r}".format(dir))
./lib/python3.8/compileall.py:                print('Compiling {!r}...'.format(fullname))
./lib/python3.8/compileall.py:                    print('*** Error compiling {!r}...'.format(fullname))
./lib/python3.8/compileall.py:                    print('*** ', end='')
./lib/python3.8/compileall.py:                print(msg)
./lib/python3.8/compileall.py:                    print('*** Error compiling {!r}...'.format(fullname))
./lib/python3.8/compileall.py:                    print('*** ', end='')
./lib/python3.8/compileall.py:                print(e.__class__.__name__ + ':', e)
./lib/python3.8/compileall.py:                print('Skipping current directory')
./lib/python3.8/compileall.py:                print("Error reading file list {}".format(args.flist))
./lib/python3.8/compileall.py:            print("\n[interrupted]")
./lib/python3.8/tabnanny.py:            print("%r: listing directory" % (file,))
./lib/python3.8/tabnanny.py:        print("checking %r ..." % file)
./lib/python3.8/tabnanny.py:            print("%r: *** Line %d: trouble in tab city! ***" % (file, badline))
./lib/python3.8/tabnanny.py:            print("offending line: %r" % (line,))
./lib/python3.8/tabnanny.py:            print(nag.get_msg())
./lib/python3.8/tabnanny.py:            if filename_only: print(file)
./lib/python3.8/tabnanny.py:            else: print(file, badline, repr(line))
./lib/python3.8/tabnanny.py:        print("%r: Clean bill of health." % (file,))
./lib/python3.8/zipfile.py:            print(endrec)
./lib/python3.8/zipfile.py:            print("given, inferred, offset", offset_cd, inferred, concat)
./lib/python3.8/zipfile.py:                print(centdir)
./lib/python3.8/zipfile.py:                print("total", total)
./lib/python3.8/zipfile.py:        print("%-46s %19s %12s" % ("File Name", "Modified    ", "Size"),
./lib/python3.8/zipfile.py:            print("%-46s %s %12d" % (zinfo.filename, date, zinfo.file_size),
./lib/python3.8/zipfile.py:                print((structCentralDir, stringCentralDir, create_version,
./lib/python3.8/zipfile.py:                print('%s %r skipped by filterfunc' % (label, pathname))
./lib/python3.8/zipfile.py:                    print("Adding package in", pathname, "as", basename)
./lib/python3.8/zipfile.py:                    print("Adding", arcname)
./lib/python3.8/zipfile.py:                                print('file %r skipped by filterfunc' % path)
./lib/python3.8/zipfile.py:                            print("Adding", arcname)
./lib/python3.8/zipfile.py:                    print("Adding files from directory", pathname)
./lib/python3.8/zipfile.py:                                print('file %r skipped by filterfunc' % path)
./lib/python3.8/zipfile.py:                            print("Adding", arcname)
./lib/python3.8/zipfile.py:                print("Adding file", arcname)
./lib/python3.8/zipfile.py:                print("Compiling", file)
./lib/python3.8/zipfile.py:                print(err.msg)
./lib/python3.8/zipfile.py:            print("The following enclosed file is corrupted: {!r}".format(badfile))
./lib/python3.8/zipfile.py:        print("Done testing")
./lib/python3.8/imaplib.py:        print('\nAll tests OK.')
./lib/python3.8/imaplib.py:        print('\nTests failed.')
./lib/python3.8/imaplib.py:            print('''
./lib/python3.8/os.py:        print(root, "consumes", end="")
./lib/python3.8/os.py:        print(sum(getsize(join(root, name)) for name in files), end="")
./lib/python3.8/os.py:        print("bytes in", len(files), "non-directory files")
./lib/python3.8/os.py:            print(root, "consumes", end="")
./lib/python3.8/os.py:            print(sum(os.stat(name, dir_fd=rootfd).st_size for name in files),
./lib/python3.8/os.py:            print("bytes in", len(files), "non-directory files")
./lib/python3.8/tokenize.py:            print("%-20s%-15s%-15r" %
./lib/python3.8/tokenize.py:        print("interrupted\n")
./lib/python3.8/venv/__init__.py:            print("""\
./lib/python3.8/venv/__init__.py:        print('Error: %s' % e, file=sys.stderr)
./lib/python3.8/venv/__main__.py:    print('Error: %s' % e, file=sys.stderr)
./lib/python3.8/pdb.py:        print(msg, file=self.stdout)
./lib/python3.8/pdb.py:        print('***', msg, file=self.stdout)
./lib/python3.8/pdb.py:        alias pi for k in %1.__dict__.keys(): print("%1.",k,"=",%1.__dict__[k])
./lib/python3.8/pdb.py:        print(_usage)
./lib/python3.8/pdb.py:            print(_usage)
./lib/python3.8/pdb.py:        print('Error:', mainpyfile, 'does not exist')
./lib/python3.8/pdb.py:            print("The program finished and will be restarted")
./lib/python3.8/pdb.py:            print("Restarting", mainpyfile, "with arguments:")
./lib/python3.8/pdb.py:            print("\t" + " ".join(args))
./lib/python3.8/pdb.py:            print("The program exited via sys.exit(). Exit status:", end=' ')
./lib/python3.8/pdb.py:            print(sys.exc_info()[1])
./lib/python3.8/pdb.py:            print("Uncaught exception. Entering post mortem debugging")
./lib/python3.8/pdb.py:            print("Running 'cont' or 'step' will restart the program")
./lib/python3.8/pdb.py:            print("Post mortem debugger finished. The " + mainpyfile +
./lib/python3.8/traceback.py:        print(item, file=file, end="")
./lib/python3.8/traceback.py:        print(line, file=file, end="")
./lib/python3.8/sre_compile.py:##         print("*** PREFIX", prefix, prefix_skip)
./lib/python3.8/sre_compile.py:##         print("*** CHARSET", charset)
./lib/python3.8/sre_compile.py:            print('%*d%s ' % (offset_width, start, ':' if start in labels else '.'),
./lib/python3.8/sre_compile.py:            print(*args)
./lib/python3.8/sre_compile.py:            print(end=' '*(offset_width + 2*level))
./lib/python3.8/sre_compile.py:            print(*args)
./lib/python3.8/sre_compile.py:        print()
./lib/python3.8/calendar.py:        print(self.formatweek(theweek, width), end='')
./lib/python3.8/calendar.py:        print(self.formatmonth(theyear, themonth, w, l), end='')
./lib/python3.8/calendar.py:        print(self.formatyear(theyear, w, l, c, m), end='')
./lib/python3.8/calendar.py:    print(formatstring(cols, colwidth, spacing))
./lib/python3.8/inspect.py:        print(msg, file=sys.stderr)
./lib/python3.8/inspect.py:        print("Can't get info for builtin modules.", file=sys.stderr)
./lib/python3.8/inspect.py:        print('Target: {}'.format(target))
./lib/python3.8/inspect.py:        print('Origin: {}'.format(getsourcefile(module)))
./lib/python3.8/inspect.py:        print('Cached: {}'.format(module.__cached__))
./lib/python3.8/inspect.py:            print('Loader: {}'.format(repr(module.__loader__)))
./lib/python3.8/inspect.py:                print('Submodule search path: {}'.format(module.__path__))
./lib/python3.8/inspect.py:                print('Line: {}'.format(lineno))
./lib/python3.8/inspect.py:        print('\n')
./lib/python3.8/inspect.py:        print(getsource(obj))
./lib/python3.8/this.py:print("".join([d.get(c, c) for c in s]))
./lib/python3.8/imghdr.py:            print(filename + '/:', end=' ')
./lib/python3.8/imghdr.py:                print('recursing down:')
./lib/python3.8/imghdr.py:                print('*** directory (use -r) ***')
./lib/python3.8/imghdr.py:            print(filename + ':', end=' ')
./lib/python3.8/imghdr.py:                print(what(filename))
./lib/python3.8/imghdr.py:                print('*** not found ***')
./lib/python3.8/locale.py:    print(s1, "is", atoi(s1))
./lib/python3.8/locale.py:    print(s1, "is", atof(s1))
./lib/python3.8/locale.py:    print('Locale defaults as determined by getdefaultlocale():')
./lib/python3.8/locale.py:    print('-'*72)
./lib/python3.8/locale.py:    print('Language: ', lang or '(undefined)')
./lib/python3.8/locale.py:    print('Encoding: ', enc or '(undefined)')
./lib/python3.8/locale.py:    print()
./lib/python3.8/locale.py:    print('Locale settings on startup:')
./lib/python3.8/locale.py:    print('-'*72)
./lib/python3.8/locale.py:        print(name, '...')
./lib/python3.8/locale.py:        print('   Language: ', lang or '(undefined)')
./lib/python3.8/locale.py:        print('   Encoding: ', enc or '(undefined)')
./lib/python3.8/locale.py:        print()
./lib/python3.8/locale.py:    print()
./lib/python3.8/locale.py:    print('Locale settings after calling resetlocale():')
./lib/python3.8/locale.py:    print('-'*72)
./lib/python3.8/locale.py:        print(name, '...')
./lib/python3.8/locale.py:        print('   Language: ', lang or '(undefined)')
./lib/python3.8/locale.py:        print('   Encoding: ', enc or '(undefined)')
./lib/python3.8/locale.py:        print()
./lib/python3.8/locale.py:        print('NOTE:')
./lib/python3.8/locale.py:        print('setlocale(LC_ALL, "") does not support the default locale')
./lib/python3.8/locale.py:        print('given in the OS environment variables.')
./lib/python3.8/locale.py:        print()
./lib/python3.8/locale.py:        print('Locale settings after calling setlocale(LC_ALL, ""):')
./lib/python3.8/locale.py:        print('-'*72)
./lib/python3.8/locale.py:            print(name, '...')
./lib/python3.8/locale.py:            print('   Language: ', lang or '(undefined)')
./lib/python3.8/locale.py:            print('   Encoding: ', enc or '(undefined)')
./lib/python3.8/locale.py:            print()
./lib/python3.8/locale.py:    print('Locale aliasing:')
./lib/python3.8/locale.py:    print()
./lib/python3.8/locale.py:    print()
./lib/python3.8/locale.py:    print('Number formatting:')
./lib/python3.8/locale.py:    print()
./lib/python3.8/getopt.py:    print(getopt(sys.argv[1:], "a:b", ["alpha=", "beta"]))
./lib/python3.8/mailcap.py:            print("usage: mailcap [MIMEtype file] ...")
./lib/python3.8/mailcap.py:            print("No viewer found for", type)
./lib/python3.8/mailcap.py:            print("Executing:", command)
./lib/python3.8/mailcap.py:                print("Exit status:", sts)
./lib/python3.8/mailcap.py:    print("Mailcap files:")
./lib/python3.8/mailcap.py:    for fn in listmailcapfiles(): print("\t" + fn)
./lib/python3.8/mailcap.py:    print()
./lib/python3.8/mailcap.py:    print("Mailcap entries:")
./lib/python3.8/mailcap.py:    print()
./lib/python3.8/mailcap.py:        print(type)
./lib/python3.8/mailcap.py:                print("  %-15s" % k, e[k])
./lib/python3.8/mailcap.py:            print()
./lib/python3.8/pprint.py:    print("_safe_repr:", t2 - t1)
./lib/python3.8/pprint.py:    print("pformat:", t3 - t2)
./lib/update-notifier/apt_check.py:        # print(res)
./lib/python3/dist-packages/secretstorage/exceptions.py:	...     print('Item not found!')
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("Header: OK")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("cgi output")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("Header: spam")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("Header: eggs")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("cgi output")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("XYZ")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("cgi output")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("Server: monkeys")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("Date: last year")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("cgi output")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("Header: OK")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("readinput ok")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("Header: OK")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("readallinput ok")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("content-type: text/cgi-duplicate-test")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("cgi output")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print("")
./lib/python3/dist-packages/twisted/web/test/test_cgi.py:print(json.dumps(vals))
./lib/python3/dist-packages/twisted/web/sux.py:        print('begin', name, attributes)
./lib/python3/dist-packages/twisted/web/sux.py:        print('text:', repr(data))
./lib/python3/dist-packages/twisted/web/sux.py:        print('entityRef: &%s;' % entityRef)
./lib/python3/dist-packages/twisted/web/sux.py:        print('!DOCTYPE', repr(doctype))
./lib/python3/dist-packages/twisted/web/sux.py:        print('end', name)
./lib/python3/dist-packages/twisted/application/app.py:        print("stop - Continue execution, then cleanly shutdown the twisted "
./lib/python3/dist-packages/twisted/application/app.py:        print(config)
./lib/python3/dist-packages/twisted/application/app.py:        print("%s: %s" % (sys.argv[0], ue))
./lib/python3/dist-packages/twisted/conch/test/test_manhole.py:                 b"...     print(bar)",
./lib/python3/dist-packages/twisted/conch/test/test_manhole.py:                 b"...         print('Hello, world!')",
./lib/python3/dist-packages/twisted/conch/test/test_cftp.py:        d = self.client._dispatchCommand("exec print(1 + 2)")
./lib/python3/dist-packages/twisted/conch/insults/client.py:                print(command)
./lib/python3/dist-packages/twisted/conch/insults/helper.py:        print('Could not handle', repr(buf))
./lib/python3/dist-packages/twisted/conch/scripts/cftp.py:        print('ERROR: %s' % u)
./lib/python3/dist-packages/twisted/conch/scripts/cftp.py:    print(s)
./lib/python3/dist-packages/twisted/conch/scripts/tkconch.py:        print('ERROR: %s' % u)
./lib/python3/dist-packages/twisted/conch/scripts/tkconch.py:            print(repr(data))
./lib/python3/dist-packages/twisted/conch/scripts/ckeygen.py:        print('ERROR: %s' % u)
./lib/python3/dist-packages/twisted/conch/scripts/ckeygen.py:            print('Generating public/private %s key pair.' % (options['type']))
./lib/python3/dist-packages/twisted/conch/scripts/ckeygen.py:        print('%s %s %s' % (
./lib/python3/dist-packages/twisted/conch/scripts/ckeygen.py:            print('Passphrases do not match.  Try again.')
./lib/python3/dist-packages/twisted/conch/scripts/ckeygen.py:    print('Your identification has been saved with the new passphrase.')
./lib/python3/dist-packages/twisted/conch/scripts/ckeygen.py:    print(displayKey)
./lib/python3/dist-packages/twisted/conch/scripts/ckeygen.py:        print('%s already exists.' % (options['filename'],))
./lib/python3/dist-packages/twisted/conch/scripts/ckeygen.py:            print('Passphrases do not match.  Try again.')
./lib/python3/dist-packages/twisted/conch/scripts/ckeygen.py:    print('Your identification has been saved in %s' % (options['filename'],))
./lib/python3/dist-packages/twisted/conch/scripts/ckeygen.py:    print('Your public key has been saved in %s.pub' % (options['filename'],))
./lib/python3/dist-packages/twisted/conch/scripts/ckeygen.py:    print('The key fingerprint in %s is:' % (options['format'],))
./lib/python3/dist-packages/twisted/conch/scripts/ckeygen.py:    print(key.fingerprint(options['format']))
./lib/python3/dist-packages/twisted/conch/scripts/conch.py:        print('ERROR: {}'.format(u))
./lib/python3/dist-packages/twisted/conch/scripts/conch.py:        print('Connection to {} closed.'.format(options['host']))
./lib/python3/dist-packages/twisted/conch/client/default.py:        print('Creating ~/.ssh directory...')
./lib/python3/dist-packages/twisted/conch/client/default.py:                print()
./lib/python3/dist-packages/twisted/conch/client/default.py:            print()
./lib/python3/dist-packages/twisted/conch/client/default.py:                print(name.decode("utf-8"))
./lib/python3/dist-packages/twisted/conch/client/default.py:                print(instruction.decode("utf-8"))
./lib/python3/dist-packages/twisted/conch/client/direct.py:            print(message)
./lib/python3/dist-packages/twisted/test/process_fds.py:    if debug: print("this is stderr", file=stderr)
./lib/python3/dist-packages/twisted/test/process_fds.py:    if debug: print("read(0):", abcd, file=stderr)
./lib/python3/dist-packages/twisted/test/process_fds.py:    if debug: print("os.write(1, righto)", file=stderr)
./lib/python3/dist-packages/twisted/test/process_fds.py:    if debug: print("read(3):", file=stderr)
./lib/python3/dist-packages/twisted/test/process_fds.py:    if debug: print("os.close(4)", file=stderr)
./lib/python3/dist-packages/twisted/test/process_fds.py:    if debug: print("read(5):", eof, file=stderr)
./lib/python3/dist-packages/twisted/test/process_fds.py:    if debug: print("os.write(1, closed)", file=stderr)
./lib/python3/dist-packages/twisted/test/process_fds.py:    if debug: print("sys.exit(0)", file=stderr)
./lib/python3/dist-packages/twisted/test/test_process.py:        if self.verbose: print("closing stdin [%d]" % num)
./lib/python3/dist-packages/twisted/test/test_process.py:        if self.verbose: print(self.pp[0].finished, self.pp[1].finished)
./lib/python3/dist-packages/twisted/test/test_process.py:        if self.verbose: print("starting processes")
./lib/python3/dist-packages/twisted/test/test_process.py:        if self.verbose: print("kill [%d] with SIGTERM" % num)
./lib/python3/dist-packages/twisted/test/test_process.py:        if self.verbose: print(self.pp[0].finished, self.pp[1].finished)
./lib/python3/dist-packages/twisted/test/test_process.py:        if self.verbose: print("starting processes")
./lib/python3/dist-packages/twisted/test/test_process.py:        if self.verbose: print("starting processes")
./lib/python3/dist-packages/twisted/test/test_process.py:        if self.verbose: print("starting processes")
./lib/python3/dist-packages/twisted/test/process_linger.py:print("here is some text")
./lib/python3/dist-packages/twisted/test/process_linger.py:print("goodbye")
./lib/python3/dist-packages/twisted/test/test_internet.py:        print('done', res)
./lib/python3/dist-packages/twisted/test/test_internet.py:        print('failed')
./lib/python3/dist-packages/twisted/test/iosim.py:            print('-- GLUG --')
./lib/python3/dist-packages/twisted/test/iosim.py:            print('.')
./lib/python3/dist-packages/twisted/test/iosim.py:                print('C: ' + repr(cData))
./lib/python3/dist-packages/twisted/test/iosim.py:                print('S: ' + repr(sData))
./lib/python3/dist-packages/twisted/test/iosim.py:                print('* C')
./lib/python3/dist-packages/twisted/test/iosim.py:                print('* S')
./lib/python3/dist-packages/twisted/test/test_threads.py:    print('threaded call')
./lib/python3/dist-packages/twisted/test/process_twisted.py:        print("connection made")
./lib/python3/dist-packages/twisted/test/process_twisted.py:        print("readConnectionLost")
./lib/python3/dist-packages/twisted/test/process_twisted.py:        print("writeConnectionLost")
./lib/python3/dist-packages/twisted/test/process_twisted.py:        print("connectionLost", reason)
./lib/python3/dist-packages/twisted/test/process_signal.py:print('ok, signal us')
./lib/python3/dist-packages/twisted/test/test_log.py:        print("Hello, world.", file=sys.stderr)
./lib/python3/dist-packages/twisted/test/test_log.py:        print("This", end=" ")
./lib/python3/dist-packages/twisted/test/test_log.py:        print("is a test")
./lib/python3/dist-packages/twisted/test/test_log.py:        print(unicodeString)
./lib/python3/dist-packages/twisted/test/process_cmdline.py:    print(x)
./lib/python3/dist-packages/twisted/tap/socks.py:        print()
./lib/python3/dist-packages/twisted/tap/socks.py:        print("WARNING:")
./lib/python3/dist-packages/twisted/tap/socks.py:        print("  You have chosen to listen on a non-local interface.")
./lib/python3/dist-packages/twisted/tap/socks.py:        print("  This may allow intruders to access your local network")
./lib/python3/dist-packages/twisted/tap/socks.py:        print("  if you run this on a firewall.")
./lib/python3/dist-packages/twisted/tap/socks.py:        print()
./lib/python3/dist-packages/twisted/python/util.py:        print('method %s of %s at %s' % (
./lib/python3/dist-packages/twisted/python/util.py:        print('function %s in %s, line %s' % (
./lib/python3/dist-packages/twisted/python/reflect.py:      print(dct)
./lib/python3/dist-packages/twisted/python/reflect.py:            print('unknown type', type(start), start)
./lib/python3/dist-packages/twisted/python/usage.py:        print(self.__str__())
./lib/python3/dist-packages/twisted/python/usage.py:        print("Twisted version:", copyright.version)
./lib/python3/dist-packages/twisted/python/_textattributes.py:        print(flatten(
./lib/python3/dist-packages/twisted/python/modules.py:            print('unpackaged: %s: %s' % (
./lib/python3/dist-packages/twisted/python/release.py:    print("--$", command)
./lib/python3/dist-packages/twisted/python/failure.py:                print('The Failure is due to either Spam or Eggs!')
./lib/python3/dist-packages/twisted/python/failure.py:                    print('Spam did it!')
./lib/python3/dist-packages/twisted/python/failure.py:                    print('Eggs did it!')
./lib/python3/dist-packages/twisted/python/failure.py:            print("Jumping into debugger for post-mortem of exception '%s':" %
./lib/python3/dist-packages/twisted/python/components.py:   print(IFoo.implementedBy(Foo)) # True
./lib/python3/dist-packages/twisted/python/components.py:   print(IFoo.providedBy(Foo())) # True
./lib/python3/dist-packages/twisted/internet/process.py:        if debug: print("childFDs", childFDs)
./lib/python3/dist-packages/twisted/internet/process.py:                if debug: print("[%d]" % childFD, target)
./lib/python3/dist-packages/twisted/internet/process.py:                    if debug: print("readFD=%d, writeFD=%d" % (readFD, writeFD))
./lib/python3/dist-packages/twisted/internet/process.py:                    if debug: print("readFD=%d, writeFD=%d" % (readFD, writeFD))
./lib/python3/dist-packages/twisted/internet/process.py:            if debug: print("fdmap", fdmap)
./lib/python3/dist-packages/twisted/internet/process.py:            if debug: print("helpers", helpers)
./lib/python3/dist-packages/twisted/internet/process.py:        if debug: print("fdmap", fdmap, file=errfd)
./lib/python3/dist-packages/twisted/internet/process.py:                if debug: print("%d already in place" % target, file=errfd)
./lib/python3/dist-packages/twisted/internet/process.py:                    if debug: print("os.dup(%d) -> %d" % (child, newtarget),
./lib/python3/dist-packages/twisted/internet/process.py:                if debug: print("os.dup2(%d,%d)" % (target, child), file=errfd)
./lib/python3/dist-packages/twisted/internet/process.py:        if debug: print("old", old, file=errfd)
./lib/python3/dist-packages/twisted/internet/test/test_gireactor.py:                print(err)
./lib/python3/dist-packages/twisted/internet/defer.py:            print(thing) #the result! hoorj!
./lib/python3/dist-packages/twisted/internet/defer.py:            print(thing)  # the result! hoorj!
./lib/python3/dist-packages/twisted/internet/_dumbwin32proc.py:    print(msg)
./lib/python3/dist-packages/twisted/internet/inotify.py:        print("event %s on %s" % (
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:        print("result:",result,"text:",text)
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:        print("result:",result,"text:",text)
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:        print("HELLO I AM A PB SERVICE", serviceName, perspectiveName)
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:        print('received group members:', names, group)
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:        print('received a group message', sender, group, message, metadata)
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:        print('member joined', member, group)
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:        print('member left')
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:        print('left',name)
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:        print('Connected Words Client!', perspective)
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:        print('Connecting...', end=' ')
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:        print('Connected!')
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:        print('Identifying...', end=' ')
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:            print('falsely identified.')
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:        print('Identified!')
./lib/python3/dist-packages/twisted/words/im/pbsupport.py:        print('Not connected.')
./lib/python3/dist-packages/twisted/words/xish/xpathparser.py:    print('%s:%d:%d: %s' % (file_name, line_number, column_number, err.msg), file=sys.stderr)
./lib/python3/dist-packages/twisted/words/xish/xpathparser.py:        print('while parsing %s%s:' % (context.rule, tuple(context.args)), file=sys.stderr)
./lib/python3/dist-packages/twisted/words/xish/xpathparser.py:        print('Could not complete parsing; stopped around here:', file=sys.stderr)
./lib/python3/dist-packages/twisted/words/xish/xpathparser.py:        print(parser._scanner, file=sys.stderr)
./lib/python3/dist-packages/twisted/words/xish/xpathparser.py:        print(parse(argv[1], f.read()))
./lib/python3/dist-packages/twisted/mail/test/pop3testserver.py:    print("Server Starting in %s mode" % msg)
./lib/python3/dist-packages/twisted/mail/test/pop3testserver.py:        print(usage)
./lib/python3/dist-packages/twisted/mail/test/pop3testserver.py:        print(usage)
./lib/python3/dist-packages/twisted/mail/imap4.py:#        print('C: ' + repr(line))
./lib/python3/dist-packages/twisted/mail/scripts/mailmail.py:        print('mailmail version:', version)
./lib/python3/dist-packages/twisted/logger/test/test_io.py:        print("Hello,", end=" ")
./lib/python3/dist-packages/twisted/logger/test/test_io.py:        print("world.")
./lib/python3/dist-packages/twisted/logger/test/test_global.py:        print("Hello, world.", file=self.sysModule.stdout)
./lib/python3/dist-packages/twisted/logger/test/test_global.py:        print("Error, world.", file=self.sysModule.stderr)
./lib/python3/dist-packages/twisted/scripts/trial.py:        print("Setting coverage directory to %s." % (result.path,))
./lib/python3/dist-packages/twisted/scripts/trial.py:        print(synopsis)
./lib/python3/dist-packages/twisted/scripts/trial.py:            print('   ', name, '\t', description)
./lib/python3/dist-packages/twisted/scripts/trial.py:        print(synopsis)
./lib/python3/dist-packages/twisted/scripts/trial.py:            print('   ', p.longOpt, '\t', p.description)
./lib/python3/dist-packages/twisted/scripts/trial.py:        print('Running tests shuffled with seed %d\n' % config['random'])
./lib/python3/dist-packages/twisted/scripts/trial.py:        print("readline module not available")
./lib/python3/dist-packages/twisted/scripts/htmlizer.py:        print(str(e))
./lib/python3/dist-packages/twisted/scripts/_twistd_unix.py:        print('twistd (the Twisted daemon) {}'.format(copyright.version),
./lib/python3/dist-packages/twisted/scripts/_twistd_unix.py:        print(copyright.copyright, file=self.stdout)
./lib/python3/dist-packages/twisted/scripts/_twistw.py:        print('twistd (the Twisted Windows runner) {}'.format(copyright.version),
./lib/python3/dist-packages/twisted/scripts/_twistw.py:        print(copyright.copyright, file=self.stdout)
./lib/python3/dist-packages/twisted/trial/util.py:                print("WEIRDNESS! pending timed call not active!")
./lib/python3/dist-packages/twisted/trial/test/erroneous.py:            print('foo!')
./lib/python3/dist-packages/twisted/trial/test/test_output.py:        print(stuff)
./lib/python3/dist-packages/aptsources/distinfo.py:                            print("WARNING: Failed to read mirror file")
./lib/python3/dist-packages/landscape/lib/fetch.py:    print(fetch(url, post=options.post, data=options.data,
./lib/python3/dist-packages/landscape/lib/config.py:        print(dir(option))
./lib/python3/dist-packages/landscape/lib/config.py:        print(option.get_opt_string())
./lib/python3/dist-packages/landscape/sysinfo/deployment.py:        print(format_sysinfo(sysinfo.get_headers(), sysinfo.get_notes(),
./lib/python3/dist-packages/certifi/__main__.py:print(where())
./lib/python3/dist-packages/LanguageSelector/LangCache.py:    print("available language information")
./lib/python3/dist-packages/LanguageSelector/LangCache.py:    print(", ".join(["%s" %x for x in lc.getLanguageInformation()]))
./lib/python3/dist-packages/LanguageSelector/LanguageSelector.py:    print(lsb.verifyPackageLists())
./lib/python3/dist-packages/LanguageSelector/xkb.py:                print(i)
./lib/python3/dist-packages/LanguageSelector/xkb.py:                print(i)
./lib/python3/dist-packages/LanguageSelector/ImConfig.py:    print('available input methods: %s' % im.getAvailableInputMethods())
./lib/python3/dist-packages/LanguageSelector/ImConfig.py:    print('current method: %s' % im.getCurrentInputMethod())
./lib/python3/dist-packages/LanguageSelector/ImConfig.py:    print("setting method 'fcitx'")
./lib/python3/dist-packages/LanguageSelector/ImConfig.py:    print('current method: %s' % im.getCurrentInputMethod())
./lib/python3/dist-packages/LanguageSelector/ImConfig.py:    print('removing ~/.xinputrc')
./lib/python3/dist-packages/LanguageSelector/LocaleInfo.py:    print("default system locale and languages: '%s'" % li.getSystemDefaultLanguage())
./lib/python3/dist-packages/LanguageSelector/LocaleInfo.py:    print("default user locale and languages: '%s'" % li.getUserDefaultLanguage())
./lib/python3/dist-packages/LanguageSelector/LocaleInfo.py:    print(li._lang)
./lib/python3/dist-packages/LanguageSelector/LocaleInfo.py:    print(li._country)
./lib/python3/dist-packages/LanguageSelector/LocaleInfo.py:    print(li._languagelist)
./lib/python3/dist-packages/LanguageSelector/LocaleInfo.py:    print(li.generated_locales())
./lib/python3/dist-packages/LanguageSelector/macros.py:        print('-------', locale, '---------------')
./lib/python3/dist-packages/LanguageSelector/macros.py:        print('string:', l.subst_string(template))
./lib/python3/dist-packages/LanguageSelector/macros.py:        print('file  :', open('testtest').read())
./lib/python3/dist-packages/validate.py:    >>> print(vtor.check('string(default="\n")', '', missing=True))
./lib/python3/dist-packages/six.py:            raise TypeError("invalid keyword arguments to print()")
./lib/python3/dist-packages/debian/debtags.py:        print("%s:" % (pkg), ", ".join(tags))
./lib/python3/dist-packages/debian/debfile.py:    print(tgz.getmember('control'))
./lib/python3/dist-packages/debian/debian_support.py:            print("update_file: no local copy, downloading full file")
./lib/python3/dist-packages/debian/debian_support.py:            print("update_file: could not interpret patch index file")
./lib/python3/dist-packages/debian/debian_support.py:            print("update_file: could not download patch index file")
./lib/python3/dist-packages/debian/debian_support.py:                        print("update_file: local file is up-to-date")
./lib/python3/dist-packages/debian/debian_support.py:                print("update_file: field %r ignored" % field)
./lib/python3/dist-packages/debian/debian_support.py:            print("update_file: could not find historic entry", local_hash)
./lib/python3/dist-packages/debian/debian_support.py:            print("update_file: downloading patch %r" % patch_name)
./lib/python3/dist-packages/debian/deb822.py:    >>> print('Origin: {Origin}\\nCodename: {Codename}\\nDate: {Date}'.format_map(rel))
./lib/python3/dist-packages/debian/deb822.py:    >>> print(list(rel.keys()))
./lib/python3/dist-packages/debian/deb822.py:    ...         print(src['Package'], src['Version'])
./lib/python3/dist-packages/debian/deb822.py:       print('Name:', f['name'])
./lib/python3/dist-packages/debian/deb822.py:       print('Size:', f['size'])
./lib/python3/dist-packages/debian/deb822.py:       print('MD5sum:', f['md5sum'])
./lib/python3/dist-packages/debian/copyright.py:            print('Upstream name: ', header.upstream_name)
./lib/python3/dist-packages/debian/copyright.py:                print('Overall license: ', lic.synopsis)
./lib/python3/dist-packages/debian/copyright.py:                print('License for debian/rules: ', paragraph.license)
./lib/python3/dist-packages/debian/changelog.py:    >>> print(ch)
./lib/python3/dist-packages/debian/changelog.py:    >>> print('''
./lib/python3/dist-packages/debian/arfile.py:    print("\n".join(a.getnames()))
./lib/python3/dist-packages/serial/tools/list_ports_osx.py:        print("{}: {} [{}]".format(port, desc, hwid))
./lib/python3/dist-packages/serial/tools/list_ports_posix.py:        print("{}: {} [{}]".format(port, desc, hwid))
./lib/python3/dist-packages/serial/tools/list_ports_linux.py:        print("{}: {} [{}]".format(port, desc, hwid))
./lib/python3/dist-packages/serial/tools/list_ports_windows.py:        print("{}: {} [{}]".format(port, desc, hwid))
./lib/python3/dist-packages/serial/tools/list_ports_common.py:    print(ListPortInfo('dummy'))
./lib/python3/dist-packages/serial/urlhandler/protocol_alt.py:    print(s)
./lib/python3/dist-packages/serial/urlhandler/protocol_hwgrep.py:    print(s)
./lib/python3/dist-packages/serial/urlhandler/protocol_spy.py:    print(ser)
./lib/python3/dist-packages/softwareproperties/MirrorTest.py:            print("mirror: %s - time: %s" % (h.hostname, t))
./lib/python3/dist-packages/softwareproperties/MirrorTest.py:            print("and the winner is: %s" % winner)
./lib/python3/dist-packages/softwareproperties/SoftwareProperties.py:        print(" %s %s" % (label, value))
./lib/python3/dist-packages/softwareproperties/SoftwareProperties.py:            print(" %s %s" % (label, value))
./lib/python3/dist-packages/softwareproperties/SoftwareProperties.py:    print("\n")
./lib/python3/dist-packages/softwareproperties/SoftwareProperties.py:    print("START SOURCES.LIST:")
./lib/python3/dist-packages/softwareproperties/SoftwareProperties.py:        print(source.str())
./lib/python3/dist-packages/softwareproperties/SoftwareProperties.py:    print("END SOURCES.LIST\n")
./lib/python3/dist-packages/softwareproperties/SoftwareProperties.py:      print("No config found, creating one")
./lib/python3/dist-packages/softwareproperties/SoftwareProperties.py:        print("file '%s' not executable, fixing" % ac)
./lib/python3/dist-packages/softwareproperties/SoftwareProperties.py:  print(sp.get_release_upgrades_policy())
./lib/python3/dist-packages/softwareproperties/ppa.py:                print("Error: signing key fingerprint '%s' too short" %
./lib/python3/dist-packages/softwareproperties/ppa.py:            print("Error: signing key fingerprint does not exist")
./lib/python3/dist-packages/softwareproperties/ppa.py:            print("Got '%s' fingerprints, expected only one" %
./lib/python3/dist-packages/softwareproperties/ppa.py:            print("Fingerprints do not match, not importing: '%s' != '%s'" % (
./lib/python3/dist-packages/softwareproperties/ppa.py:            print(e.value)
./lib/python3/dist-packages/softwareproperties/ppa.py:            print("Error: can't find signing_key_fingerprint at %s" % ppa_path)
./lib/python3/dist-packages/softwareproperties/ppa.py:    print(get_ppa_info(ppa))
./lib/python3/dist-packages/jwt/__main__.py:        print(output)
./lib/python3/dist-packages/jwt/__main__.py:        print('There was an unforseen error: ', e)
./lib/python3/dist-packages/jwt/help.py:    print(json.dumps(info(), sort_keys=True, indent=2))
./lib/python3/dist-packages/oauthlib/oauth2/rfc6749/clients/mobile_application.py:            ...     print(message, old, new)
./lib/python3/dist-packages/apt/debfile.py:            print(msg, file=sys.stderr)
./lib/python3/dist-packages/apt/debfile.py:    print("%s virtual: %s" % (vp, cache.is_virtual_package(vp)))
./lib/python3/dist-packages/apt/debfile.py:    print("Providers for %s :" % vp)
./lib/python3/dist-packages/apt/debfile.py:        print(" %s" % pkg.name)
./lib/python3/dist-packages/apt/debfile.py:    print("Deb: %s" % d.pkgname)
./lib/python3/dist-packages/apt/debfile.py:        print("can't be satified")
./lib/python3/dist-packages/apt/debfile.py:        print(d._failure_string)
./lib/python3/dist-packages/apt/debfile.py:    print("missing deps: %s" % d.missing_deps)
./lib/python3/dist-packages/apt/debfile.py:    print(d.required_changes)
./lib/python3/dist-packages/apt/debfile.py:    print(d.filelist)
./lib/python3/dist-packages/apt/debfile.py:    print("Installing ...")
./lib/python3/dist-packages/apt/debfile.py:    print(ret)
./lib/python3/dist-packages/apt/debfile.py:    print(s._satisfy_depends(apt_pkg.parse_depends(ds, False)))
./lib/python3/dist-packages/apt/cache.py:    print("cache pre changed")
./lib/python3/dist-packages/apt/cache.py:    print("cache post changed")
./lib/python3/dist-packages/apt/cache.py:    print("Cache self test")
./lib/python3/dist-packages/apt/cache.py:    print(("aptitude" in cache))
./lib/python3/dist-packages/apt/cache.py:    print(pkg.name)
./lib/python3/dist-packages/apt/cache.py:    print(len(cache))
./lib/python3/dist-packages/apt/cache.py:    print(len(changes))
./lib/python3/dist-packages/apt/cache.py:    print("Testing filtered cache (argument is old cache)")
./lib/python3/dist-packages/apt/cache.py:    print(len(filtered))
./lib/python3/dist-packages/apt/cache.py:    print(len(filtered))
./lib/python3/dist-packages/apt/cache.py:    print("Testing filtered cache (no argument)")
./lib/python3/dist-packages/apt/cache.py:    print(len(filtered))
./lib/python3/dist-packages/apt/cache.py:    print(len(filtered))
./lib/python3/dist-packages/apt/package.py:    print("Self-test for the Package modul")
./lib/python3/dist-packages/apt/package.py:    print("Name: %s " % pkg.name)
./lib/python3/dist-packages/apt/package.py:    print("ID: %s " % pkg.id)
./lib/python3/dist-packages/apt/package.py:    print("Priority (Candidate): %s " % pkg.candidate.priority)
./lib/python3/dist-packages/apt/package.py:    print("Priority (Installed): %s " % pkg.installed.priority)
./lib/python3/dist-packages/apt/package.py:    print("Installed: %s " % pkg.installed.version)
./lib/python3/dist-packages/apt/package.py:    print("Candidate: %s " % pkg.candidate.version)
./lib/python3/dist-packages/apt/package.py:    print("CandidateDownloadable: %s" % pkg.candidate.downloadable)
./lib/python3/dist-packages/apt/package.py:    print("CandidateOrigins: %s" % pkg.candidate.origins)
./lib/python3/dist-packages/apt/package.py:    print("SourcePkg: %s " % pkg.candidate.source_name)
./lib/python3/dist-packages/apt/package.py:    print("Section: %s " % pkg.section)
./lib/python3/dist-packages/apt/package.py:    print("Summary: %s" % pkg.candidate.summary)
./lib/python3/dist-packages/apt/package.py:    print("Description (formatted) :\n%s" % pkg.candidate.description)
./lib/python3/dist-packages/apt/package.py:    print("Description (unformatted):\n%s" % pkg.candidate.raw_description)
./lib/python3/dist-packages/apt/package.py:    print("InstalledSize: %s " % pkg.candidate.installed_size)
./lib/python3/dist-packages/apt/package.py:    print("PackageSize: %s " % pkg.candidate.size)
./lib/python3/dist-packages/apt/package.py:    print("Dependencies: %s" % pkg.installed.dependencies)
./lib/python3/dist-packages/apt/package.py:    print("Recommends: %s" % pkg.installed.recommends)
./lib/python3/dist-packages/apt/package.py:        print(",".join("%s (%s) (%s) (%s)" % (o.name, o.version, o.relation,
./lib/python3/dist-packages/apt/package.py:    print("arch: %s" % pkg.candidate.architecture)
./lib/python3/dist-packages/apt/package.py:    print("homepage: %s" % pkg.candidate.homepage)
./lib/python3/dist-packages/apt/package.py:    print("rec: ", pkg.candidate.record)
./lib/python3/dist-packages/apt/package.py:    print(cache["2vcard"].get_changelog())
./lib/python3/dist-packages/apt/package.py:        print("Running install on random upgradable pkgs with AutoFix: ", i)
./lib/python3/dist-packages/apt/package.py:        print("Broken: %s " % cache._depcache.broken_count)
./lib/python3/dist-packages/apt/package.py:        print("InstCount: %s " % cache._depcache.inst_count)
./lib/python3/dist-packages/apt/package.py:    print()
./lib/python3/dist-packages/apt/package.py:        print("Randomly remove some packages with AutoFix: %s" % i)
./lib/python3/dist-packages/apt/package.py:                    print("Error trying to remove: %s " % name)
./lib/python3/dist-packages/apt/package.py:        print("Broken: %s " % cache._depcache.broken_count)
./lib/python3/dist-packages/apt/package.py:        print("DelCount: %s " % cache._depcache.del_count)
./lib/python3/dist-packages/apt/progress/base.py:                print(err.strerror)
./lib/python3/dist-packages/apt/auth.py:        print(trusted_key)
./lib/python3/dist-packages/debconf.py:            print(db.get('debconf/frontend'))
./lib/python3/dist-packages/debconf.py:        print(db.get('debconf/frontend'))
./lib/python3/dist-packages/debconf.py:    print(db.version)
./lib/python3/dist-packages/debconf.py:    print(db.capabilities)
./lib/python3/dist-packages/debconf.py:    print(less)
./lib/python3/dist-packages/debconf.py:    print(aptlc)
./lib/python3/dist-packages/uaclient/entitlements/fips.py:            print("Warning: no option to disable {}".format(self.title))
./lib/python3/dist-packages/uaclient/entitlements/livepatch.py:                print("Installing snapd")
./lib/python3/dist-packages/uaclient/entitlements/livepatch.py:                print(status.MESSAGE_APT_UPDATING_LISTS)
./lib/python3/dist-packages/uaclient/entitlements/livepatch.py:            print("Installing canonical-livepatch snap")
./lib/python3/dist-packages/uaclient/entitlements/livepatch.py:                print(msg)
./lib/python3/dist-packages/uaclient/entitlements/livepatch.py:                print(msg)
./lib/python3/dist-packages/uaclient/entitlements/livepatch.py:            print("Canonical livepatch enabled.")
./lib/python3/dist-packages/uaclient/entitlements/livepatch.py:            print("Removing canonical-livepatch snap")
./lib/python3/dist-packages/uaclient/entitlements/repo.py:                print("Installing {title} packages".format(title=self.title))
./lib/python3/dist-packages/uaclient/entitlements/repo.py:                    print(msg)
./lib/python3/dist-packages/uaclient/entitlements/repo.py:        print(status.MESSAGE_ENABLED_TMPL.format(title=self.title))
./lib/python3/dist-packages/uaclient/entitlements/repo.py:            print(msg)
./lib/python3/dist-packages/uaclient/entitlements/repo.py:            print(
./lib/python3/dist-packages/uaclient/entitlements/repo.py:        print(status.MESSAGE_APT_UPDATING_LISTS)
./lib/python3/dist-packages/uaclient/entitlements/repo.py:        print(status.MESSAGE_APT_UPDATING_LISTS)
./lib/python3/dist-packages/uaclient/entitlements/base.py:                print(
./lib/python3/dist-packages/uaclient/entitlements/base.py:                print(status.MESSAGE_UNENTITLED_TMPL.format(title=self.title))
./lib/python3/dist-packages/uaclient/entitlements/base.py:                print(
./lib/python3/dist-packages/uaclient/entitlements/base.py:                print(details)
./lib/python3/dist-packages/uaclient/cli.py:    print(ua_status.MESSAGE_REFRESH_ENABLE)
./lib/python3/dist-packages/uaclient/cli.py:        print("Detach will disable the following service{}:".format(suffix))
./lib/python3/dist-packages/uaclient/cli.py:            print("    {}".format(ent.name))
./lib/python3/dist-packages/uaclient/cli.py:    print(ua_status.MESSAGE_DETACH_SUCCESS)
./lib/python3/dist-packages/uaclient/cli.py:        print(ua_status.MESSAGE_ATTACH_FAILURE)
./lib/python3/dist-packages/uaclient/cli.py:    print(
./lib/python3/dist-packages/uaclient/cli.py:        print("Re-attaching Ubuntu Advantage subscription on new instance")
./lib/python3/dist-packages/uaclient/cli.py:        print(json.dumps(status))
./lib/python3/dist-packages/uaclient/cli.py:        print(output)
./lib/python3/dist-packages/uaclient/cli.py:    print(version.get_version())
./lib/python3/dist-packages/uaclient/cli.py:    print(ua_status.MESSAGE_REFRESH_SUCCESS)
./lib/python3/dist-packages/uaclient/cli.py:            print("Interrupt received; exiting.", file=sys.stderr)
./lib/python3/dist-packages/uaclient/cli.py:            print(ua_status.MESSAGE_CONNECTIVITY_ERROR, file=sys.stderr)
./lib/python3/dist-packages/uaclient/cli.py:            print("{}".format(exc.msg), file=sys.stderr)
./lib/python3/dist-packages/uaclient/cli.py:            print(ua_status.MESSAGE_UNEXPECTED_ERROR, file=sys.stderr)
./lib/python3/dist-packages/uaclient/cli.py:        print("Try 'ua --help' for more information.")
./lib/python3/dist-packages/systemd/daemon.py:          'from systemd.daemon import listen_fds; print(listen_fds())'
./lib/python3/dist-packages/systemd/test/test_journal.py:    print('printed message...', file=stream)
./lib/python3/dist-packages/systemd/journal.py:    ...    print(entry['MESSAGE'])
./lib/python3/dist-packages/systemd/journal.py:    >>> print('message...', file=stream)                       # doctest: +SKIP
./lib/python3/dist-packages/httplib2/certs.py:    print(where())
./lib/python3/dist-packages/httplib2/__init__.py:            print("%s:" % h, end=" ", file=self._fp)
./lib/python3/dist-packages/httplib2/__init__.py:                print(v.encode(maxlinelen=self._maxheaderlen), file=self._fp)
./lib/python3/dist-packages/httplib2/__init__.py:                print(headers.encode(), file=self._fp)
./lib/python3/dist-packages/httplib2/__init__.py:        print(file=self._fp)
./lib/python3/dist-packages/httplib2/__init__.py:                    print(
./lib/python3/dist-packages/httplib2/__init__.py:                        print(
./lib/python3/dist-packages/httplib2/__init__.py:                    print("connect fail: ({0}, {1})".format(self.host, self.port))
./lib/python3/dist-packages/httplib2/__init__.py:                        print(
./lib/python3/dist-packages/httplib2/__init__.py:                    print("connect: ({0}, {1})".format(self.host, self.port))
./lib/python3/dist-packages/httplib2/__init__.py:                        print(
./lib/python3/dist-packages/httplib2/__init__.py:                    print("connect fail: ({0}, {1})".format(self.host, self.port))
./lib/python3/dist-packages/httplib2/__init__.py:                        print(
./lib/python3/dist-packages/setuptools/command/easy_install.py:        print(tmpl.format(**locals()))
./lib/python3/dist-packages/setuptools/command/upload_docs.py:            print('-' * 75, r.read(), '-' * 75)
./lib/python3/dist-packages/setuptools/command/alias.py:            print("Command Aliases")
./lib/python3/dist-packages/setuptools/command/alias.py:            print("---------------")
./lib/python3/dist-packages/setuptools/command/alias.py:                print("setup.py alias", format_alias(alias, aliases))
./lib/python3/dist-packages/setuptools/command/alias.py:                print("setup.py alias", format_alias(alias, aliases))
./lib/python3/dist-packages/setuptools/command/alias.py:                print("No alias definition found for %r" % alias)
./lib/python3/dist-packages/setuptools/_vendor/six.py:            raise TypeError("invalid keyword arguments to print()")
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(pe)
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print("column: {}".format(pe.col))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print("%s -> %s" % (s, fn(eval(s))))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(OneOrMore(Word(nums)).addParseAction(remove_first).parseString("0 123 321")) # -> ['123', '321']
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(patt.parseString("AAB 123 321").dump())
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(patt.parseString("AAB 123 321").dump())
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(result.get("year")) # -> '1999'
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(result.get("hour", "not specified")) # -> 'not specified'
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(result.get("hour")) # -> None
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(OneOrMore(Word(nums)).addParseAction(insert_locn).parseString("0 123 321")) # -> [0, '0', '123', '321']
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(OneOrMore(Word(nums)).addParseAction(append_sum).parseString("0 123 321")) # -> ['0', '123', '321', 444]
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(patt.addParseAction(make_palindrome).parseString("lskdj sdlkjf lksd")) # -> 'lskdjsdlkjflksddsklfjkldsjdksl'
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(type(result), result) # -> <class 'pyparsing.ParseResults'> ['sldkj', 'lsdkj', 'sldkj']
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(type(result_list), result_list) # -> <class 'list'> ['sldkj', 'lsdkj', 'sldkj']
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(type(result), repr(result)) # -> <class 'pyparsing.ParseResults'> (['12', '/', '31', '/', '1999'], {'day': [('1999', 4)], 'year': [('12', 0)], 'month': [('31', 2)]})
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(type(result_dict), repr(result_dict)) # -> <class 'dict'> {'day': '1999', 'year': '12', 'month': '31'}
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(json.dumps(result)) # -> Exception: TypeError: ... is not JSON serializable
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(json.dumps(result.asDict())) # -> {"month": "31", "day": "1999", "year": "12"}
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:                print(item.getName(), ':', item[0])
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(result.dump())
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(OneOrMore(integerK | integerM | integer).parseString("5K 100 640K 256M"))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(source)
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:                print(' '*start + '^'*(end-start))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:                print(' '*start + tokens[0])
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(wd.transformString("now is the winter of our discontent made glorious summer by this sun of york."))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(cap_word.searchString("More than Iron, more than Lead, more than Gold I need Electricity"))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(sum(cap_word.searchString("More than Iron, more than Lead, more than Gold I need Electricity")))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(list(punc.split("This, this?, this sentence, is badly punctuated!")))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print("Success" if result[0] else "Failed!")
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print("Success" if result[0] else "Failed!")
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:                print('\n'.join(out))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(qs.searchString('lsjdf "This is the quote" sldjf'))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(complex_qs.searchString('lsjdf {{This is the "quote"}} sldjf'))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(sql_qs.searchString('lsjdf "This is the quote with ""embedded"" quotes" sldjf'))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(delimitedList(csv_value).parseString("dkls,lsdkjf,s12 34,@!#,213"))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(t)
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(number.searchString("123 3.1416 789"))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(number.searchString("123 3.1416 789")) #  Fail! -> [['123'], ['3'], ['1416'], ['789']]
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(number.searchString("123 3.1416 789")) #  Better -> [['123'], ['3.1416'], ['789']]
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(real.parseString('3.1416')) # -> ['3', '.', '1416']
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(real.parseString('3. 1416')) # -> ['3', '.', '1416']
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(real.parseString('3.1416')) # -> ['3.1416']
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(real.parseString('3. 1416')) # -> Exception: Expected W:(0123...)
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(func.parseString("fn a,b,100"))  # -> ['fn', 'a', 'b', '100']
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(func.parseString("fn a,b,100"))  # -> ['fn', ['a', 'b', '100']]
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(OneOrMore(attr_expr).parseString(text).dump())
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(result.dump())
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(result['shape'])        
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(result.asDict())
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(wd_list1.parseString(source))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(wd_list2.parseString(source))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(wds.parseString("slkdjs sld sldd sdlf sdljf"))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(comparison_expr.searchString("B = 12  AA=23 B<=AA AA>12"))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(OneOrMore(attr_expr).parseString(text).dump())
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(result.dump())
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(result['shape'])
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(result.shape)  # object attribute access works too
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:        print(result.asDict())
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(patt.searchString(src)[0])
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(match)
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(link.link_text, '->', link.href)
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(grid_header.body)
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(div_header.body)
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(grid_header.body)
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(div_header.body)
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print("%(name)s (%(type)s) args: %(args)s" % func)
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(date_expr.parseString("1999-12-31"))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(dt_expr.parseString("1999-12-31T23:59:59.999"))
./lib/python3/dist-packages/setuptools/_vendor/pyparsing.py:            print(table_text.parseString(text).body) # -> 'More info at the pyparsing wiki page'
./lib/python3/dist-packages/setuptools/_vendor/ordered_set.py:            >>> print(oset)
./lib/python3/dist-packages/setuptools/_vendor/ordered_set.py:            >>> print(oset)
./lib/python3/dist-packages/setuptools/_vendor/ordered_set.py:            >>> print(oset)
./lib/python3/dist-packages/setuptools/_vendor/ordered_set.py:            >>> print(oset)
./lib/python3/dist-packages/setuptools/_vendor/ordered_set.py:            >>> print(oset)
./lib/python3/dist-packages/setuptools/_vendor/ordered_set.py:            >>> print(oset)
./lib/python3/dist-packages/setuptools/_vendor/ordered_set.py:            >>> print(this)
./lib/python3/dist-packages/setuptools/_vendor/ordered_set.py:            >>> print(this)
./lib/python3/dist-packages/setuptools/_vendor/ordered_set.py:            >>> print(this)
./lib/python3/dist-packages/setuptools/_vendor/ordered_set.py:            >>> print(this)
./lib/python3/dist-packages/gi/_ossighelper.py:                    print(e)
./lib/python3/dist-packages/gi/_signalhelper.py:            print(obj)
./lib/python3/dist-packages/requests/certs.py:    print(where())
./lib/python3/dist-packages/requests/__init__.py:   >>> print(r.text)
./lib/python3/dist-packages/requests/help.py:    print(json.dumps(info(), sort_keys=True, indent=2))
./lib/python3/dist-packages/pkg_resources/__init__.py:            print('Could not load', errors)
./lib/python3/dist-packages/pkg_resources/_vendor/six.py:            raise TypeError("invalid keyword arguments to print()")
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(pe)
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print("column: {}".format(pe.col))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print("%s -> %s" % (s, fn(eval(s))))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(OneOrMore(Word(nums)).addParseAction(remove_first).parseString("0 123 321")) # -> ['123', '321']
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(patt.parseString("AAB 123 321").dump())
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(patt.parseString("AAB 123 321").dump())
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(result.get("year")) # -> '1999'
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(result.get("hour", "not specified")) # -> 'not specified'
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(result.get("hour")) # -> None
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(OneOrMore(Word(nums)).addParseAction(insert_locn).parseString("0 123 321")) # -> [0, '0', '123', '321']
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(OneOrMore(Word(nums)).addParseAction(append_sum).parseString("0 123 321")) # -> ['0', '123', '321', 444]
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(patt.addParseAction(make_palindrome).parseString("lskdj sdlkjf lksd")) # -> 'lskdjsdlkjflksddsklfjkldsjdksl'
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(type(result), result) # -> <class 'pyparsing.ParseResults'> ['sldkj', 'lsdkj', 'sldkj']
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(type(result_list), result_list) # -> <class 'list'> ['sldkj', 'lsdkj', 'sldkj']
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(type(result), repr(result)) # -> <class 'pyparsing.ParseResults'> (['12', '/', '31', '/', '1999'], {'day': [('1999', 4)], 'year': [('12', 0)], 'month': [('31', 2)]})
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(type(result_dict), repr(result_dict)) # -> <class 'dict'> {'day': '1999', 'year': '12', 'month': '31'}
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(json.dumps(result)) # -> Exception: TypeError: ... is not JSON serializable
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(json.dumps(result.asDict())) # -> {"month": "31", "day": "1999", "year": "12"}
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:                print(item.getName(), ':', item[0])
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(result.dump())
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(OneOrMore(integerK | integerM | integer).parseString("5K 100 640K 256M"))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(source)
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:                print(' '*start + '^'*(end-start))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:                print(' '*start + tokens[0])
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(wd.transformString("now is the winter of our discontent made glorious summer by this sun of york."))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(cap_word.searchString("More than Iron, more than Lead, more than Gold I need Electricity"))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(sum(cap_word.searchString("More than Iron, more than Lead, more than Gold I need Electricity")))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(list(punc.split("This, this?, this sentence, is badly punctuated!")))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print("Success" if result[0] else "Failed!")
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print("Success" if result[0] else "Failed!")
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:                print('\n'.join(out))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(qs.searchString('lsjdf "This is the quote" sldjf'))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(complex_qs.searchString('lsjdf {{This is the "quote"}} sldjf'))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(sql_qs.searchString('lsjdf "This is the quote with ""embedded"" quotes" sldjf'))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(delimitedList(csv_value).parseString("dkls,lsdkjf,s12 34,@!#,213"))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(t)
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(number.searchString("123 3.1416 789"))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(number.searchString("123 3.1416 789")) #  Fail! -> [['123'], ['3'], ['1416'], ['789']]
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(number.searchString("123 3.1416 789")) #  Better -> [['123'], ['3.1416'], ['789']]
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(real.parseString('3.1416')) # -> ['3', '.', '1416']
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(real.parseString('3. 1416')) # -> ['3', '.', '1416']
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(real.parseString('3.1416')) # -> ['3.1416']
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(real.parseString('3. 1416')) # -> Exception: Expected W:(0123...)
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(func.parseString("fn a,b,100"))  # -> ['fn', 'a', 'b', '100']
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(func.parseString("fn a,b,100"))  # -> ['fn', ['a', 'b', '100']]
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(OneOrMore(attr_expr).parseString(text).dump())
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(result.dump())
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(result['shape'])        
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(result.asDict())
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(wd_list1.parseString(source))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(wd_list2.parseString(source))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(wds.parseString("slkdjs sld sldd sdlf sdljf"))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(comparison_expr.searchString("B = 12  AA=23 B<=AA AA>12"))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(OneOrMore(attr_expr).parseString(text).dump())
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(result.dump())
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(result['shape'])
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(result.shape)  # object attribute access works too
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:        print(result.asDict())
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(patt.searchString(src)[0])
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(match)
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(link.link_text, '->', link.href)
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(grid_header.body)
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(div_header.body)
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(grid_header.body)
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(div_header.body)
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print("%(name)s (%(type)s) args: %(args)s" % func)
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(date_expr.parseString("1999-12-31"))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(dt_expr.parseString("1999-12-31T23:59:59.999"))
./lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py:            print(table_text.parseString(text).body) # -> 'More info at the pyparsing wiki page'
./lib/python3/dist-packages/pkg_resources/_vendor/appdirs.py:    print("-- app dirs %s --" % __version__)
./lib/python3/dist-packages/pkg_resources/_vendor/appdirs.py:    print("-- app dirs (with optional 'version')")
./lib/python3/dist-packages/pkg_resources/_vendor/appdirs.py:        print("%s: %s" % (prop, getattr(dirs, prop)))
./lib/python3/dist-packages/pkg_resources/_vendor/appdirs.py:    print("\n-- app dirs (without optional 'version')")
./lib/python3/dist-packages/pkg_resources/_vendor/appdirs.py:        print("%s: %s" % (prop, getattr(dirs, prop)))
./lib/python3/dist-packages/pkg_resources/_vendor/appdirs.py:    print("\n-- app dirs (without optional 'appauthor')")
./lib/python3/dist-packages/pkg_resources/_vendor/appdirs.py:        print("%s: %s" % (prop, getattr(dirs, prop)))
./lib/python3/dist-packages/pkg_resources/_vendor/appdirs.py:    print("\n-- app dirs (with disabled 'appauthor')")
./lib/python3/dist-packages/pkg_resources/_vendor/appdirs.py:        print("%s: %s" % (prop, getattr(dirs, prop)))
./lib/python3/dist-packages/chardet/cli/chardetect.py:            print("You are running chardetect interactively. Press " +
./lib/python3/dist-packages/chardet/cli/chardetect.py:        print(description_of(f, f.name))
./lib/python3/dist-packages/hyperlink/_url.py:        >>> print(url.to_text())
./lib/python3/dist-packages/hyperlink/_url.py:        >>> print(url.normalize().to_text())
./lib/python3/dist-packages/hyperlink/_url.py:            >>> print(url.to_iri().to_text())
./lib/python3/dist-packages/simplejson/__init__.py:    >>> print(json.dumps("\"foo\bar"))
./lib/python3/dist-packages/simplejson/__init__.py:    >>> print(json.dumps(u'\u1234'))
./lib/python3/dist-packages/simplejson/__init__.py:    >>> print(json.dumps('\\'))
./lib/python3/dist-packages/simplejson/__init__.py:    >>> print(json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True))
./lib/python3/dist-packages/simplejson/__init__.py:    >>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent='    '))
./lib/python3/dist-packages/apport/packaging_impl.py:            # print('kernel ddeb already installed')
./lib/python3/dist-packages/apport/packaging_impl.py:                        # print('Removing %s which is already the right version' % p)
./lib/python3/dist-packages/apport/packaging_impl.py:                        # print('Installing %s version %s' % (p, cache[p].candidate.version))
./lib/python3/dist-packages/apport/packaging_impl.py:                    # print('Installing %s version %s' % (p, cache[p].candidate.version))
./lib/python3/dist-packages/apport/packaging_impl.py:                    # print('Installing %s version %s' % (p, cache[p].candidate.version))
./lib/python3/dist-packages/apport/packaging_impl.py:                    # print('Removing %s which is already the right version' % p)
./lib/python3/dist-packages/apport/packaging_impl.py:                    # print('Installing %s' % p)
./lib/python3/dist-packages/apport/packaging_impl.py:                    # print('Removing %s which is already the right version' % p)
./lib/python3/dist-packages/apport/packaging_impl.py:            print('Extracting downloaded debs...')
./lib/python3/dist-packages/apport/crashdb_impl/memory.py:    print(_f(5))
./lib/python3/dist-packages/apport/crashdb_impl/memory.py:    print(_f(5))
./lib/python3/dist-packages/apport/crashdb_impl/launchpad.py:    print(weird)
./lib/python3/dist-packages/apport/crashdb_impl/launchpad.py:            # print('distro bug: https://staging.launchpad.net/bugs/%i' % distro_bug.id)
./lib/python3/dist-packages/apport/crashdb_impl/launchpad.py:            # print('project bug: https://staging.launchpad.net/bugs/%i' % project_bug.id)
./lib/python3/dist-packages/apport/crashdb_impl/launchpad.py:            print('fake arch bug: https://staging.launchpad.net/bugs/%i' % bug.id)
./lib/python3/dist-packages/apport/crashdb_impl/launchpad.py:    print(weird)
./lib/python3/dist-packages/apport/__init__.py:    print(message)
./lib/python3/dist-packages/apport/crashdb.py:            print('duplicate db has format %i, upgrading to %i' %
./lib/python3/dist-packages/apport/crashdb.py:            print('DEBUG: bug %i was invalidated, removing from database' % id)
./lib/python3/dist-packages/apport/crashdb.py:            print('DEBUG: bug %i got fixed in version %s, updating database' % (id, real_fixed_version))
./lib/python3/dist-packages/apport/crashdb.py:            print('DEBUG: bug %i got reopened, dropping fixed version %s from database' % (id, db_fixed_version))
./lib/python3/dist-packages/apport/ui.py:            # print('Collecting apport information for source package %s...' % p)
./lib/python3/dist-packages/apport/ui.py:                    print('Package %s not installed and no hook available, ignoring' % p)
./lib/python3/dist-packages/apport/ui.py:            print(__version__)
./lib/python3/dist-packages/UpdateManager/Core/MetaRelease.py:                    print("Can't unlink '%s' (%s)" % (self.METARELEASE_FILE,
./lib/python3/dist-packages/UpdateManager/Core/MetaRelease.py:            print("Failed to connect to %s. Check your Internet connection "
./lib/python3/dist-packages/UpdateManager/Core/UpdateList.py:                    print("WARNING: upgradable but no candidate.origins?!?: ",
./lib/python3/dist-packages/UpdateManager/Core/MyCache.py:        # print("Trying: %s " % uri)
./lib/python3/dist-packages/UpdateManager/Core/MyCache.py:            print("caught exception: ", e)
./lib/python3/dist-packages/UpdateManager/Core/utils.py:        print("%s: %s" % (self.info, time.time() - self.now))
./lib/python3/dist-packages/UpdateManager/Core/utils.py:                print("proxy '%s' looks invalid" % proxy, file=sys.stderr)
./lib/python3/dist-packages/UpdateManager/Core/utils.py:        print('Could not load list of meta packages:', e)
./lib/python3/dist-packages/UpdateManager/Core/roam.py:        print("is_gsm_roaming", mmhelper.is_gsm_roaming())
./lib/python3/dist-packages/UpdateManager/Core/roam.py:        print("is_cdma_romaing", mmhelper.is_cdma_roaming())
./lib/python3/dist-packages/UpdateManager/Core/roam.py:    print("roam: ", is_roaming)
./lib/python3/dist-packages/more_itertools/more.py:        ...         print('Thing number %s is %s.' % (i, (yield)))
./lib/python3/dist-packages/more_itertools/more.py:        >>> func = lambda item: print('Received {}'.format(item))
./lib/python3/dist-packages/more_itertools/more.py:        >>> func = lambda x: print(x, file=f)
./lib/python3/dist-packages/more_itertools/more.py:        >>> before = lambda: print(u'HEADER', file=f)
./lib/python3/dist-packages/more_itertools/more.py:        >>> print(*always_reversible(x for x in range(3)))
./lib/python3/dist-packages/more_itertools/more.py:        ...     print(list(group))
./lib/python3/dist-packages/more_itertools/more.py:        ...     print(list(group))
./lib/python3/dist-packages/more_itertools/tests/test_more.py:            print(item, file=f)
./lib/python3/dist-packages/more_itertools/tests/test_more.py:        before = lambda: print('HEADER', file=f)
./lib/python3/dist-packages/more_itertools/tests/test_more.py:        func = lambda x: print(x, file=f)
./lib/python3/dist-packages/keyring/tests/backends/test_Windows.py:                print(e, file=sys.stderr)
./lib/python3/dist-packages/keyring/tests/backends/test_SecretService.py:        print("Testing SecretServiceKeyring; the following "
./lib/python3/dist-packages/keyring/cli.py:                print(k)
./lib/python3/dist-packages/keyring/cli.py:        print(password, file=sys.stdout)
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:          print("%s (%f)" % (text, step.value/float(self.totalSteps)*100))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:        print()
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print()
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print(msg)
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print()
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print(_("Aborting"))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print()
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print(twrap(summary))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print(twrap(msg))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:        print(twrap(extended_msg))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print(_("To continue please press [ENTER]"))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print()
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print(twrap(summary))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print(twrap(msg))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:        print(twrap(extended_msg))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print(output)
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print()
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print(twrap(summary))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print(twrap(self.confirmChangesMessage))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print(" %s %s" % (_("Continue [yN] "), _("Details [d]")), end="")
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:        print("%s %s" % (_("Continue [yN] "), _("Details [d]")), end="")
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print()
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:        print(twrap(summary))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:      print(twrap(msg))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:          print(_("Continue [yN] "), end="")
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:          print(_("Continue [Yn] "), end="")
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:  print(twrap("89 packages are going to be upgraded.\nYou have to download a total of 82.7M.\nThis download will take about 10 minutes with a 1Mbit DSL connection and about 3 hours 12 minutes with a 56k modem.", subsequent_indent=" "))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:  print(view.askYesNoQuestion("hello", "Icecream?", "No"))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:  print(view.askYesNoQuestion("hello", "Icecream?", "Yes"))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewText.py:  print(view.askYesNoQuestion("hello", "Icecream?"))
./lib/python3/dist-packages/DistUpgrade/MetaRelease.py:                    print("Can't unlink '%s' (%s)" % (self.METARELEASE_FILE,
./lib/python3/dist-packages/DistUpgrade/MetaRelease.py:            print("Failed to connect to %s. Check your Internet connection "
./lib/python3/dist-packages/DistUpgrade/DistUpgradeCache.py:            print("No candidate ver: ", pkg.name)
./lib/python3/dist-packages/DistUpgrade/DistUpgradeCache.py:            print("No file_list for: %s " % self._pkg.name())
./lib/python3/dist-packages/DistUpgrade/DistUpgradeCache.py:    print("foo")
./lib/python3/dist-packages/DistUpgrade/DistUpgradeCache.py:    print(c.checkFreeSpace())
./lib/python3/dist-packages/DistUpgrade/DistUpgradeCache.py:    print(c.get_changes())
./lib/python3/dist-packages/DistUpgrade/xorg_fix_proprietary.py:        print("Need to run as root")
./lib/python3/dist-packages/DistUpgrade/apt_btrfs_snapshot.py:            print(_("INFO: snapshot directory '%s' already exists, "
./lib/python3/dist-packages/DistUpgrade/apt_btrfs_snapshot.py:        print("Available snapshots:")
./lib/python3/dist-packages/DistUpgrade/apt_btrfs_snapshot.py:        print("  \n".join(self.get_btrfs_root_snapshots_list()))
./lib/python3/dist-packages/DistUpgrade/apt_btrfs_snapshot.py:            print("Available snapshots older than '%s':" % timefmt)
./lib/python3/dist-packages/DistUpgrade/apt_btrfs_snapshot.py:            print("  \n".join(self.get_btrfs_root_snapshots_list(
./lib/python3/dist-packages/DistUpgrade/apt_btrfs_snapshot.py:            print("Default changed to %s, please reboot for changes to take "
./lib/python3/dist-packages/DistUpgrade/apt_btrfs_snapshot.py:            print("You have selected an invalid snapshot. Please make sure "
./lib/python3/dist-packages/DistUpgrade/DistUpgradeConfigParser.py:    print(c.getlist("Distro", "MetaPkgs"))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeConfigParser.py:    print(c.getlist("Distro", "ForcedPurges"))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeConfigParser.py:    print(c.getListFromFile("Sources", "ValidMirrors"))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeConfigParser.py:    print(c.getWithDefault("Distro", "EnableApport", True))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeConfigParser.py:    print(c.set("Distro", "Foo", "False"))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeConfigParser.py:    print(c.getWithDefault("Distro", "Foo", True))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewNonInteractive.py:            print("fetched %s (%.2f/100) at %sb/s" % (
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewNonInteractive.py:            print("UNKNOWN (trigger?) dpkg/script failure for %s (%s) " % (pkg, errormsg))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeMain.py:            print("can't load %s (%s)" % (requested_view, e))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeMain.py:        print("No view can be imported, aborting")
./lib/python3/dist-packages/DistUpgrade/utils.py:        print("%s: %s" % (self.info, time.time() - self.now))
./lib/python3/dist-packages/DistUpgrade/utils.py:                print("proxy '%s' looks invalid" % proxy, file=sys.stderr)
./lib/python3/dist-packages/DistUpgrade/utils.py:        print('Could not load list of meta packages:', e)
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewKDE.py:        print("error, can't find file: " + file)
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewKDE.py:                print(e)
./lib/python3/dist-packages/DistUpgrade/DistUpgradeViewKDE.py:        print("exitMainLoopMidFlight")
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:        print("Clone info differences: ")
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:                print(" '%s': clone='%s' system='%s'" % (
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:        print("")
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:            print("".join(diff))
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:            print("Installed on the system but not in the clone-file:")
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:            print(" ".join(sorted(only_on_system)))
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:            print("\n")
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:            print("Installed in the clone-file but not in the system:")
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:            print(" ".join(sorted(only_in_clone)))
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:            print("\n")
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:            print("Version differences: ")
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:            print("Pkgname <clone-file-version> <system-version>")
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:                print(" %s  <%s>   <%s>" % (pkgname, clone_ver, system_ver))
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:            print("Dir '%s' does not exist, need to bootstrap first" % targetdir)
./lib/python3/dist-packages/DistUpgrade/apt_clone.py:        print("not implemented yet")
./lib/python3/dist-packages/DistUpgrade/DistUpgradeView.py:        print("Exception during pm.DoInstall(): ", e)
./lib/python3/dist-packages/DistUpgrade/DistUpgradeFetcherCore.py:        print(summary)
./lib/python3/dist-packages/DistUpgrade/DistUpgradeFetcherCore.py:        print(message)
./lib/python3/dist-packages/DistUpgrade/DistUpgradeFetcherCore.py:            print(_("authenticate '%(file)s' against '%(signature)s' ") % {
./lib/python3/dist-packages/DistUpgrade/DistUpgradeFetcherCore.py:        print(_("extracting '%s'") % os.path.basename(fname))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeFetcherCore.py:#    print(d.authenticate('/tmp/Release','/tmp/Release.gpg'))
./lib/python3/dist-packages/DistUpgrade/DistUpgradeFetcherCore.py:    print("got mirror: '%s'" %
./lib/python3/dist-packages/OpenSSL/debug.py:    print(_env_info)
./lib/python3/dist-packages/pyrsistent/_immutable.py:        print(template)
./lib/python3/dist-packages/cloudinit/reporting/handlers.py:        print(event.as_string())
./lib/python3/dist-packages/cloudinit/config/schema.py:            print(annotated_cloudconfig_file({}, content, error.schema_errors))
./lib/python3/dist-packages/cloudinit/config/schema.py:            print(annotated_cloudconfig_file({}, content, error.schema_errors))
./lib/python3/dist-packages/cloudinit/config/schema.py:            print(annotated_cloudconfig_file(
./lib/python3/dist-packages/cloudinit/config/schema.py:    print(message, file=sys.stderr)
./lib/python3/dist-packages/cloudinit/config/schema.py:            print("Valid cloud-config file {0}".format(args.config_file))
./lib/python3/dist-packages/cloudinit/config/schema.py:            print(get_schema_doc(subschema))
./lib/python3/dist-packages/cloudinit/sources/DataSourceMAAS.py:            print("== %s ==\n%s\n" % (url, geturl(url).decode()))
./lib/python3/dist-packages/cloudinit/sources/DataSourceMAAS.py:            print("=== user-data ===")
./lib/python3/dist-packages/cloudinit/sources/DataSourceMAAS.py:            print("N/A" if userdata is None else userdata.decode())
./lib/python3/dist-packages/cloudinit/sources/DataSourceMAAS.py:            print("=== meta-data ===")
./lib/python3/dist-packages/cloudinit/sources/DataSourceMAAS.py:            print("=== vendor-data ===")
./lib/python3/dist-packages/cloudinit/sources/DataSourceSmartOS.py:        print("Do not appear to be on smartos.")
./lib/python3/dist-packages/cloudinit/sources/DataSourceSmartOS.py:    print(json.dumps(data, indent=1, sort_keys=True,
./lib/python3/dist-packages/cloudinit/sources/DataSourceExoscale.py:    print(util.json_dumps(data))
./lib/python3/dist-packages/cloudinit/sources/DataSourceIBMCloud.py:    print(util.json_dumps(data))
./lib/python3/dist-packages/cloudinit/sources/DataSourceOracle.py:    print(util.json_dumps(data))
./lib/python3/dist-packages/cloudinit/sources/DataSourceGCE.py:    print(json.dumps(data, indent=1, sort_keys=True, separators=(',', ': ')))
./lib/python3/dist-packages/cloudinit/cmd/status.py:        print('status: {0}'.format(status))
./lib/python3/dist-packages/cloudinit/cmd/status.py:            print('time: {0}'.format(time))
./lib/python3/dist-packages/cloudinit/cmd/status.py:        print('detail:\n{0}'.format(status_detail))
./lib/python3/dist-packages/cloudinit/cmd/status.py:        print('status: {0}'.format(status))
./lib/python3/dist-packages/cloudinit/cmd/query.py:            print(rendered_payload)
./lib/python3/dist-packages/cloudinit/cmd/query.py:    print(response)
./lib/python3/dist-packages/cloudinit/analyze/show.py:        print(e)
./lib/python3/dist-packages/cloudinit/analyze/dump.py:    print(main())
./lib/python3/dist-packages/launchpadlib/credentials.py:        print(message)
./lib/python3/dist-packages/launchpadlib/credentials.py:                    print("Unexpected response from Launchpad:")
./lib/python3/dist-packages/launchpadlib/credentials.py:                    print(e)
./lib/python3/dist-packages/CommandNotFound/util.py:            print(_("Sorry, command-not-found has crashed! Please file a bug report at:"), file=sys.stderr)
./lib/python3/dist-packages/CommandNotFound/util.py:            print(bug_report_url, file=sys.stderr)
./lib/python3/dist-packages/CommandNotFound/util.py:            print(_("Please include the following information with the report:"), file=sys.stderr)
./lib/python3/dist-packages/CommandNotFound/util.py:            print(file=sys.stderr)
./lib/python3/dist-packages/CommandNotFound/util.py:            print(_("command-not-found version: %s") % version, file=sys.stderr)
./lib/python3/dist-packages/CommandNotFound/util.py:            print(_("Python version: %d.%d.%d %s %d") % sys.version_info, file=sys.stderr)
./lib/python3/dist-packages/CommandNotFound/util.py:            print(_("Exception information:"), file=sys.stderr)
./lib/python3/dist-packages/CommandNotFound/util.py:            print(file=sys.stderr)
./lib/python3/dist-packages/CommandNotFound/util.py:            print(ex, file=sys.stderr)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:                print("%s" % install_command, file=sys.stdout)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print(_("Command '%s' not found, but there are %s similar ones.") % (word, len(mispell_packages)), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print(_("Command '%s' not found, did you mean:") % word, file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:                print(_("  command '%s' from snap %s%s") % (command, snap, ver), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:                print(_("  command '%s' from deb %s%s") % (command, package, ver), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:        print("", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print(_("See 'snap info <snapname>' for additional versions."), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:                print(_("Try: %s <deb name>") % "sudo apt install", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:                print(_("Try: %s <deb name>") % "apt install", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:        print("", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:        print(file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:        print(_("Command '%(command)s' not found, but can be installed with:") % {
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:        print(file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("snap install %s" % snap[0], file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("sudo snap install %s" % snap[0], file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("snap install %s" % snap[0], file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print(_("Please ask your administrator."))
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:        print("", file=self.output_fd)                    
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("apt install %s" % packages[0][0], file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("sudo apt install %s" % packages[0][0], file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("apt install %s" % packages[0][0], file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print(_("Please ask your administrator."))
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:                print(_("You will have to enable the component called '%s'") % packages[0][2], file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:        print("", file=self.output_fd)                    
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:                print("%sapt install %-*s%s" % (self.sudo(), pad, package[0], ver), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:                print("%sapt install %-*s%s" % (self.sudo(), pad, package[0], ver) + " (" + _("You will have to enable component called '%s'") % package[2] + ")", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print(_("Ask your administrator to install one of them."), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:        print("", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("%ssnap install %-*s%s" % (self.sudo(), pad, snap[0], ver), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:        print("", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:        print(_("See 'snap info <snapname>' for additional versions."), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:        print("", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("%ssnap install %-*s%s" % (self.sudo(), pad, snap[0], ver), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("%sapt  install %-*s%s" % (self.sudo(), pad, package[0], ver), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:        print("", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print(_("See 'snap info %s' for additional versions.") % snaps[0][0], file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print(_("See 'snap info <snapname>' for additional versions."), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:        print("", file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:                print(_("Command '%(command)s' is available in '%(place)s'") % {"command": command, "place": os.path.join(prefixes[0], command)}, file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:                print(_("Command '%(command)s' is available in the following places") % {"command": command}, file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:                    print(" * %s" % os.path.join(prefix, command), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:                print(_("The command could not be located because '%s' is not included in the PATH environment variable.") % ":".join(missing), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:                    print(_("This is most likely caused by the lack of administrative privileges associated with your user account."), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("")
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print(_("Command '%s' not found, did you mean:") % command, file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("")
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print(_("  command '%s' from deb %s%s") % ("python3", "python3", ""), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print(_("  command '%s' from deb %s%s") % ("python", "python-is-python3", ""), file=self.output_fd)
./lib/python3/dist-packages/CommandNotFound/CommandNotFound.py:            print("")
./lib/python3/dist-packages/CommandNotFound/db/creator.py:        print("usage: %s <output-db-path> <files...>" % sys.argv[0])
./lib/python3/dist-packages/CommandNotFound/db/creator.py:        print(" e.g.: %s commands.db ./dists/*/*/*/Commands-*" % sys.argv[0])
./lib/python3/dist-packages/CommandNotFound/db/creator.py:        print(" e.g.: %s /var/lib/command-not-found/commands.db  /var/lib/apt/lists/*Commands-*", sys.argv[0])
./share/sosreport/sos/policies/redhat.py:            print("Could not obtain installed package list", file=sys.stderr)
./share/sosreport/sos/policies/__init__.py:        # print() call.
./share/sosreport/sos/policies/__init__.py:        print(_("Attempting upload to %s" % self.get_upload_url_string()))
./share/sosreport/sos/policies/suse.py:            print("Could not obtain installed package list", file=sys.stderr)
./share/sosreport/sos/plugins/pulp.py:            '  print(stats[c][\'ns\'] + \': \' +'
./share/sosreport/sos/plugins/navicli.py:                    print("The IP address you entered, %s, is not to an "
./share/sosreport/sos/plugins/navicli.py:                print(" Gathering NAVICLI information for %s..." %
./share/sosreport/sos/sosreport.py:        print("\n%s\n" % _("sosreport (version %s)" % (__version__,)))
./share/sosreport/sos/sosreport.py:                print("")
./share/sosreport/sos/sosreport.py:                print(" %s while setting up archive" % e.strerror)
./share/sosreport/sos/sosreport.py:                print("")
./share/sosreport/sos/sosreport.py:                print("Error setting up archive: %s" % e)
./share/sosreport/sos/sosreport.py:        # All subsequent terminal output must use print().
./share/sosreport/sos/sosreport.py:                print(_("Creating compressed archive..."))
./share/sosreport/sos/sosreport.py:                print("")
./share/sosreport/sos/sosreport.py:                print(_(" %s while finalizing archive %s" %
./share/sosreport/sos/sosreport.py:                print("")
./share/sosreport/sos/sosreport.py:                print(_("Error moving directory: %s" % directory))
./share/sosreport/sos/sosreport.py:                print("Creating archive tarball failed.")
./share/sosreport/sos/sosreport.py:                    print(_("Error writing checksum for file: %s" % archive))
./share/sosreport/sos/sosreport.py:                    print(_("Error moving archive file: %s" % archive))
./share/sosreport/sos/sosreport.py:                    print(_("Error moving checksum file: %s" % archive_hash))
./share/fwupd/simple_client.py:            print("\nUpdating %s" % self.device)
./share/fwupd/simple_client.py:        print(item.to_string())
./share/fwupd/simple_client.py:        print(device.to_string())
./share/fwupd/simple_client.py:        print("%s" % glib_err)
./share/fwupd/simple_client.py:    print("\n")
./share/fwupd/simple_client.py:        print("Need to specify payload")
./share/fwupd/simple_client.py:        print("%s doesn't exist or isn't a file" % cab)
./share/fwupd/add_capsule_header.py:        print(e)
./share/fwupd/add_capsule_header.py:        print(e)
./share/fwupd/add_capsule_header.py:            print('Replacing existing CAPSULE_HEADER of:')
./share/fwupd/add_capsule_header.py:            print('GUID:      %s' % guid_mixed)
./share/fwupd/add_capsule_header.py:            print('HdrSz:     0x%04x' % hdrsz_old)
./share/fwupd/add_capsule_header.py:            print('Flags:     0x%04x' % flags)
./share/fwupd/add_capsule_header.py:            print('PayloadSz: 0x%04x' % imgsz)
./share/fwupd/add_capsule_header.py:    print('Wrote capsule %s' % outfile)
./share/fwupd/add_capsule_header.py:    print('GUID:      %s' % guid)
./share/fwupd/add_capsule_header.py:    print('HdrSz:     0x%04x' % hdrsz)
./share/fwupd/add_capsule_header.py:    print('Flags:     0x%04x' % flags)
./share/fwupd/add_capsule_header.py:    print('PayloadSz: 0x%04x' % imgsz)
./share/fwupd/firmware_packager.py:        print('Using temp directory {}'.format(dir))
./share/fwupd/firmware_packager.py:            print('Extracting firmware exe')
./share/fwupd/firmware_packager.py:        print('Locating firmware bin')
./share/fwupd/firmware_packager.py:        print('Creating metainfo')
./share/fwupd/firmware_packager.py:        print('Cabbing firmware files')
./share/fwupd/firmware_packager.py:        print('Done')
./share/fwupd/install_dell_bios_exe.py:    print("Generated CAB file %s" % cab)
./share/fwupd/install_dell_bios_exe.py:            print("Installing to %s" % item.get_name())
./share/fwupd/install_dell_bios_exe.py:    print("Couldn't find any UEFI devices")
./share/fwupd/install_dell_bios_exe.py:    print("An update requires a reboot to complete")
./share/fwupd/install_dell_bios_exe.py:            print("Reboot your machine manually to finish the update.")
./share/netplan/netplan/cli/utils.py:            print('You need to specify a command', file=sys.stderr)
./share/netplan/netplan/cli/commands/migrate.py:                print(netplan_yaml)
./share/netplan/netplan/cli/commands/try_command.py:            print("\nReverting.")
./share/netplan/netplan/cli/commands/try_command.py:            print("\nConfiguration accepted.")
./share/netplan/netplan/cli/commands/try_command.py:            print("\nAn error occurred: %s" % e)
./share/netplan/netplan/cli/commands/try_command.py:            print("\nReverting.")
./share/netplan/netplan/cli/commands/try_command.py:                print("{}: {}".format(ifname, reason))
./share/netplan/netplan/cli/commands/try_command.py:            print("\nPlease carefully review the configuration and use 'netplan apply' directly.")
./share/netplan/netplan/cli/commands/ip.py:                        print(line.rstrip())
./share/netplan/netplan/cli/commands/ip.py:                print("No lease found for interface '%s': %s" % (self.interface, str(e)),
./share/netplan/netplan/cli/commands/info.py:            print(json.dumps(netplan_version, indent=2))
./share/netplan/netplan/cli/commands/info.py:            print(yaml.dump(netplan_version, indent=2, default_flow_style=False))
./share/netplan/netplan/terminal.py:        print("Do you want to keep these settings?\n\n")
./share/netplan/netplan/terminal.py:        print("Press ENTER before the timeout to {}\n\n".format(message))
./share/netplan/netplan/terminal.py:            print("Changes will revert in {:>{}} seconds".format(timeout_now, len(str(timeout))), end='\r')
./share/doc/git/contrib/hg-to-git/hg-to-git.py:        print("""\
./share/doc/git/contrib/hg-to-git/hg-to-git.py:            print('State does exist, reading')
./share/doc/git/contrib/hg-to-git/hg-to-git.py:        print('State does not exist, first run')
./share/doc/git/contrib/hg-to-git/hg-to-git.py:    print('tip is', tip)
./share/doc/git/contrib/hg-to-git/hg-to-git.py:    print('analysing the branches...')
./share/doc/git/contrib/hg-to-git/hg-to-git.py:    print('creating repository')
./share/doc/git/contrib/hg-to-git/hg-to-git.py:    print('-----------------------------------------')
./share/doc/git/contrib/hg-to-git/hg-to-git.py:    print('cset:', cset)
./share/doc/git/contrib/hg-to-git/hg-to-git.py:    print('branch:', hgbranch[str(cset)])
./share/doc/git/contrib/hg-to-git/hg-to-git.py:    print('user:', user)
./share/doc/git/contrib/hg-to-git/hg-to-git.py:    print('date:', date)
./share/doc/git/contrib/hg-to-git/hg-to-git.py:    print('comment:', csetcomment)
./share/doc/git/contrib/hg-to-git/hg-to-git.py:        print('parent:', parent)
./share/doc/git/contrib/hg-to-git/hg-to-git.py:        print('mparent:', mparent)
./share/doc/git/contrib/hg-to-git/hg-to-git.py:        print('tag:', tag)
./share/doc/git/contrib/hg-to-git/hg-to-git.py:    print('-----------------------------------------')
./share/doc/git/contrib/hg-to-git/hg-to-git.py:            print('creating new branch', hgbranch[str(cset)])
./share/doc/git/contrib/hg-to-git/hg-to-git.py:            print('checking out branch', hgbranch[str(cset)])
./share/doc/git/contrib/hg-to-git/hg-to-git.py:        print('merging', otherbranch, 'into', hgbranch[str(cset)])
./share/doc/git/contrib/hg-to-git/hg-to-git.py:        print("Deleting unused branch:", otherbranch)
./share/doc/git/contrib/hg-to-git/hg-to-git.py:    print('record', cset, '->', vvv)
./share/doc/git/contrib/hg-to-git/hg-to-git.py:        print('Writing state')
./share/doc/git/contrib/svn-fe/svnrdump_sim.py:        print("usage: %s dump URL -rLOWER:UPPER")
./share/doc/python3-serial/examples/at_protocol.py:        print('event received:', event)
./share/doc/python3-serial/examples/at_protocol.py:                    #~ print("%s -> %r" % (command, line))
./share/doc/python3-serial/examples/at_protocol.py:        print("reset OK")
./share/doc/python3-serial/examples/at_protocol.py:        print("MAC address is", bt_module.get_mac_address())
./share/doc/python3-serial/examples/wxSerialConfigDialog.py:        print(ser)
./share/doc/python3-serial/examples/wxSerialConfigDialog.py:            print(ser)
./share/doc/python3-serial/examples/wxSerialConfigDialog.py:            print(ser)
./share/doc/python3-colorama/examples/demo05.py:print('%sWrapped yellow going to stdout, via the default print function.' % Fore.YELLOW)
./share/doc/python3-colorama/examples/demo05.py:print('%sUnwrapped CYAN going to stdout, via the default print function.' % Fore.CYAN)
./share/doc/python3-colorama/examples/demo05.py:print('%sUnwrapped CYAN, using the file parameter to write via colorama the AnsiToWin32 function.' % Fore.CYAN, file=AnsiToWin32(sys.stdout))
./share/doc/python3-colorama/examples/demo05.py:print('%sUnwrapped RED going to stdout, via the default print function.' % Fore.RED)
./share/doc/python3-colorama/examples/demo05.py:print('%sWrapped RED going to stdout, via the default print function.' % Fore.RED)
./share/doc/python3-colorama/examples/demo06.py:    print(Back.WHITE, end='')
./share/doc/python3-colorama/examples/demo06.py:    print('%s%s' % (pos(MINY, MINX), ' '*MAXX), end='')
./share/doc/python3-colorama/examples/demo06.py:        print('%s %s ' % (pos(y, MINX), pos(y, MAXX)), end='')
./share/doc/python3-colorama/examples/demo06.py:    print('%s%s' % (pos(MAXY, MINX), ' '*MAXX), end='')
./share/doc/python3-colorama/examples/demo06.py:        print('%s%s%s%s%s' % (pos(randint(1+MINY,MAXY-1), randint(1+MINX,MAXX-1)), choice(FORES), choice(BACKS), choice(STYLES), choice(CHARS)), end='')
./share/doc/python3-colorama/examples/demo06.py:    print('%s%s%s%s' % (pos(MINY, MINX), Fore.WHITE, Back.BLACK, Style.NORMAL), end='')
./share/doc/python3-colorama/examples/demo01.py:print()
./share/doc/python3-colorama/examples/demo01.py:    print(Style.RESET_ALL)
./share/doc/python3-colorama/examples/demo01.py:print()
./share/doc/python3-colorama/examples/demo08.py:        print(Fore.GREEN + 'text is green')
./share/doc/python3-colorama/examples/demo08.py:        print(Fore.RESET + 'text is back to normal')
./share/doc/python3-colorama/examples/demo08.py:    print('text is back to stdout')
./share/doc/python3-colorama/examples/demo04.py:print(Fore.GREEN + 'GREEN set on stdout. ', end='')
./share/doc/python3-colorama/examples/demo04.py:print(Fore.RED + 'RED redirected stderr', file=sys.stderr)
./share/doc/python3-colorama/examples/demo04.py:print('Further stdout should be GREEN, i.e., the stderr redirection should not affect stdout.')
./share/doc/python3-colorama/examples/demo02.py:print(Fore.GREEN + 'green, '
./share/doc/python3-colorama/examples/demo02.py:print(Back.GREEN + 'green, '
./share/doc/python3-colorama/examples/demo02.py:print(Style.DIM + 'dim, '
./share/doc/python3-colorama/examples/demo02.py:print()
./share/doc/python3-colorama/examples/demo07.py:    print("aaa")
./share/doc/python3-colorama/examples/demo07.py:    print("aaa")
./share/doc/python3-colorama/examples/demo07.py:    print("aaa")
./share/doc/python3-colorama/examples/demo07.py:    print(forward() + up(2) + "b" + up() + back(2) + "1" + forward() + "2" + back(3) + down(2) + "3" + forward() + "4")
./share/doc/python3-colorama/examples/demo03.py:print(Fore.CYAN + Back.MAGENTA + Style.BRIGHT + 'Line 1: colored, with autoreset=True')
./share/doc/python3-colorama/examples/demo03.py:print('Line 2: When auto reset is True, the color settings need to be set with every print.')
./share/doc/python3-colorama/examples/demo03.py:print(Fore.YELLOW + Back.BLUE + Style.BRIGHT + 'Line 3: colored, with autoreset=False')
./share/doc/python3-colorama/examples/demo03.py:print('Line 4: When autoreset=False, the prior color settings linger (this is the default behavior).')
./share/doc/python3-debian/examples/deb822/grep_native_packages.py:            print(stanza['package'])
./share/apport/symptoms/_audio_data.py:        print(c.pretty_name())
./share/apport/symptoms/_audio_data.py:            print(j.pretty_name())
./share/apport/general-hooks/generic.py:        print('%s: %s' % (k, r[k]))
./share/apport/general-hooks/ubuntu.py:        print('WARNING: malformed Package field: ' + report['Package'])
./share/apport/general-hooks/ubuntu.py:        print('WARNING: apt-cache showpkg %s failed' % package)
./share/apport/general-hooks/ubuntu.py:            print('+%s: %s' % (key, new_report[key]))
./share/apport/general-hooks/ubuntu.py:            print('-%s: (deleted)' % key)
./share/apport/general-hooks/ubuntu.py:                print('~%s: (changed)' % key)
./share/apport/general-hooks/ubuntu.py:    print('%d items changed' % changed)
./share/apport/general-hooks/parse_segv.py:            # print('%s -> %s' % (reg, reg[1:]))
./share/apport/general-hooks/parse_segv.py:            # print('got %s (%d & %d == %d)' % (reg, self.regs[reg], mask, self.regs[reg] & ~mask))
./share/apport/general-hooks/parse_segv.py:            # print('%s -> %sx' % (reg, reg[0]))
./share/apport/general-hooks/parse_segv.py:            # print('got %s (%d & %d == %d)' % (reg, self.regs[reg], mask, self.regs[reg] & ~mask))
./share/apport/general-hooks/parse_segv.py:            # print('%s -> e%s' % (reg, reg))
./share/apport/general-hooks/parse_segv.py:            # print('got %s (%d & %d == %d)' % (reg, self.regs[reg], mask, self.regs[reg] & ~mask))
./share/apport/general-hooks/parse_segv.py:            # print('%s -> r%s' % (reg, reg[1:]))
./share/apport/general-hooks/parse_segv.py:            # print('got %s (%d & %d == %d)' % (reg, self.regs[reg], mask, self.regs[reg] & ~mask))
./share/apport/general-hooks/parse_segv.py:        print('To run self-test, run without any arguments (or with -v)')
./share/apport/general-hooks/parse_segv.py:        print('To do stand-alone crash parsing:')
./share/apport/general-hooks/parse_segv.py:        print('  Usage: %s Registers.txt Disassembly.txt ProcMaps.txt' % (sys.argv[0]))
./share/apport/general-hooks/parse_segv.py:    print('%s\n\n%s' % (reason, details))
./share/apport/package-hooks/source_linux.py:        print('%s: %s' % (k, v))
./share/apport/package-hooks/source_grub2.py:        print('%s: "%s"' % (k, v))
./share/apport/package-hooks/source_grub2.py:        print("========================================")
./share/apport/package-hooks/source_shadow.py:        print('[%s]\n%s' % (key, report[key]))
./share/apport/package-hooks/source_debian-installer.py:            print('%s: %s' % (key, report[key].split('\n', 1)[0]))
./share/apport/package-hooks/source_debian-installer.py:            print('%s: %s' % (key, type(report[key])))
./share/pyshared/lsb_release.py:# Python3-compatible print() function
./share/pyshared/lsb_release.py:            print('Unable to open ' + etc_dpkg_origins_default + ':', str(msg), file=sys.stderr)
./share/pyshared/lsb_release.py:            print('Unable to open ' + etc_debian_version + ':', str(msg), file=sys.stderr)
./share/pyshared/lsb_release.py:            print('Unable to open ' + os_release + ':', str(msg), file=sys.stderr)
./share/pyshared/lsb_release.py:    print(get_distro_information())
./share/pyshared/lsb_release.py:    print(check_modules_installed())
./share/python3/py3versions.py:            print(default_version(opts.version_only))
./share/python3/py3versions.py:            print("%s:" % program, msg)
./share/python3/py3versions.py:        print(' '.join(supported_versions(opts.version_only)))
./share/python3/py3versions.py:        print(' '.join(installed_versions(opts.version_only)))
./share/python3/py3versions.py:            print(' '.join(vs))
./share/python3/debpython/interpreter.py:        result = self._execute('import imp; print(imp.get_magic())', version)
./share/python3/debpython/interpreter.py:        return self._execute('import imp; print(imp.get_tag())', version)
